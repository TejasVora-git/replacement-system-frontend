{"version":3,"sources":["api/index.js","api/apiList.js","redux/action.js","redux/actionFunction.js","components/header.js","components/loader.js","pages/customer/createCustomer.js","pages/createItem/createItem.js","components/formateDate.js","pages/TableHover.js","components/replacementAddressPrint.js","pages/createReplacementPartner/createReplacementPartner.js","components/printInward.js","pages/stage1/index.js","pages/createItem/editItem.js","pages/createReplacementPartner/editReplacementPartner.js","pages/customer/editCustomer.js","pages/stage2/index.js","components/printOutward.js","pages/stage3/index.js","components/filter.js","pages/editReplacementData.js","pages/signUp.js","pages/404.js","pages/login.js","pages/protectedRoute.js","router.js","redux/reducer/reducer.js","redux/rootReducer.js","redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["FetchAPI","method","url","a","data","header","res","fetch","process","headers","crossDomain","body","JSON","stringify","json","errors","status","HOME","SPECIFIC_REPLACEMENT_DATA","STAGE1","STAGE2","GET_ALL_ITEM","GET_ALL_REPLACEMENT_PARTNER","GET_ALL_CUSTOMER","MESSAGE","message","type","payload","getAllCustomer","getAllItem","getAllPartner","Header","history","useHistory","useEffect","then","dispatch","useDispatch","className","id","style","marginLeft","to","onClick","localStorage","setItem","push","marginRight","removeItem","Loader","class","CreateCustomer","useState","customers","setCustomers","loading","setLoading","useForm","register","handleSubmit","reset","formState","getCustomerData","onSubmit","htmlFor","required","name","city","contactNumber","marginTop","length","scope","map","key","customerId","window","confirm","color","CreateItem","items","setItems","getItemData","placeholder","itemId","formateDate","value","input","undefined","date","Date","day","getDate","month","getMonth","year","getFullYear","TableHover","setData","today","setDate","replacementId","srno","quantity","additionalDescription","inwardDate","salesDate","stage","replacementSentDate","replacementPartherId","purchaseBillDate","customerName","itemName","replacementPartherName","ReplacementAddressPrint","printData","setPrintData","setTimeout","print","width","border","textAlign","fontFamily","fontSize","fontWeight","wordWrap","float","addressLine1","addressLine2","addressLine3","pincode","margin","marginBottom","CreateReplacementPartner","partners","setPartners","mainData","setMainData","searchValue","setSearchValue","getPartnerData","for","onChange","e","target","filterValue","filter","toLowerCase","includes","searchData","Object","keys","InwardPrint","customerData","reduxItemData","useSelector","state","replacementSystem","src","alt","find","itemData","GetcustomerName","productName","srNo","InwardStage1","reduxCustomerData","allCustomerData","setAllCustomerData","allItemData","setAllItemData","selectedCustomer","setSelectedCustomer","selectedCustomerData","setSelecctedCustomerData","additionaldescription","salesdate","inputList","setInputList","setInwardDate","handleInputChange","index","list","handleAddClick","defaultValue","disabled","preventDefault","parseInt","x","i","splice","handleRemoveClick","EditItem","setValue","getAllItems","params","useParams","handleSubmitData","EditPartner","EditCustomer","getAllCustomers","InwardStage2","reduxPartnerData","productData","setProductData","OutwordPrint","console","log","height","customerCity","customerContectNumber","newSrno","InwardStage3","replacementReturnDate","additionalDesc","outwardDate","givenToPerson","FilterData","FilterOptionValue","getItem","allPartnerData","setAllPartnerData","filterData","setFilterData","getTotalRecords","useMemo","filterOption","EditReplacementData","handleChange","evt","selected","SignUp","password","setPassword","pass","pattern","email","validate","comfirmPassword","PageNOtFound","Login","token","ProtectedRoute","props","decode","jwt","verify","iat","path","component","Routes","GlobalMessage","toast","success","warning","error","exact","INITIAL_STATE","reducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","App","pauseOnFocusLoss","autoClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qiBAAaA,EAAQ,uCAAG,WAAOC,EAAQC,GAAf,iCAAAC,EAAA,yDAAoBC,EAApB,+BAA2B,KAC3CC,EAAS,CACb,eAAgB,oBAGdC,EAAM,GACI,OAAVL,GAA6B,UAAVA,EAND,gCAORM,MAAMC,uDAAgCN,EAAK,CACrDD,OAAQA,EACRQ,QAASJ,IATS,OAOpBC,EAPoB,+CAYRC,MAAMC,uDAAgCN,EAAK,CACrDD,OAAQA,EACRS,aAAa,EACbD,QAASJ,EACTM,KAAMC,KAAKC,UAAUT,KAhBH,QAYpBE,EAZoB,gCAmBHA,EAAIQ,OAnBD,aAmBhBA,EAnBgB,QAoBbC,OApBa,0CAuBbD,GAvBa,iCA0Bf,CAAEV,KAAMU,EAAME,OAAQV,EAAIU,SA1BX,4CAAH,wDCARC,EAAO,UACPC,EAA4B,WAO5BC,EAAS,mBACTC,EAAS,oBAITC,EAAe,OASfC,EAA8B,qBAO9BC,EAAmB,W,OC7BnBC,EAAU,UACVD,EAAmB,mBACnBF,EAAe,eACfC,EAA8B,8BCI9BG,EAAU,SAACrB,GACtB,MAAO,CACLsB,KAAMF,EACNG,QAASvB,IAIAwB,EAAiB,SAACxB,GAC7B,MAAO,CACLsB,KAAMH,EACNI,QAASvB,IAGAyB,EAAa,SAACzB,GACzB,MAAO,CACLsB,KAAML,EACNM,QAASvB,IAGA0B,EAAgB,SAAC1B,GAC5B,MAAO,CACLsB,KAAMJ,EACNK,QAASvB,I,OCoGE2B,EAjHA,WACb,IAAMC,EAAUC,cAChBC,oBAAS,sBAAC,sBAAA/B,EAAA,sEACFH,EAAS,MAAOuB,GAAkBY,MAAK,SAAC7B,GAAD,OAC3C8B,EAASR,EAAetB,EAAIF,UAFtB,uBAIFJ,EAAS,MAAOqB,GAAcc,MAAK,SAAC7B,GAAD,OACvC8B,EAASP,EAAWvB,EAAIF,UALlB,uBAOFJ,EAAS,MAAOsB,GAA6Ba,MAAK,SAAC7B,GAAD,OACtD8B,EAASN,EAAcxB,EAAIF,UARrB,2CAUP,IACH,IAAMgC,EAAWC,cAQjB,OACE,mCACE,qBAAKC,UAAU,uCAAf,SACE,sBACEA,UAAU,2BACVC,GAAG,yBACHC,MAAO,CAAEC,WAAY,QAHvB,UAKE,qBAAIH,UAAU,qBAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMI,GAAG,IAAT,SACE,mBAAGJ,UAAU,WAAb,sBAGJ,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMI,GAAG,cAAT,SACE,mBAAGJ,UAAU,WAAb,6BAGJ,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMI,GAAG,kBAAT,SACE,mBAAGJ,UAAU,WAAb,iCAIJ,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMI,GAAG,kBAAT,SACE,cAAC,IAAD,CAAMA,GAAG,4BAAT,SACE,mBAAGJ,UAAU,WAAb,8CAIN,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMI,GAAG,gBAAT,SACE,mBAAGJ,UAAU,WAAb,wBAGJ,qBAAIA,UAAU,oBAAd,UACE,mBAAGA,UAAU,2BAAb,sBACA,sBAAKA,UAAU,2BAAf,UACE,mBACEA,UAAU,gBACVK,QAAS,WACPC,aAAaC,QAAQ,eAAgB,uBACrCb,EAAQc,KAAK,YAJjB,iCASA,mBACER,UAAU,gBACVK,QAAS,WACPC,aAAaC,QAAQ,eAAgB,oBACrCb,EAAQc,KAAK,YAJjB,8BASA,mBACER,UAAU,gBACVK,QAAS,WACPC,aAAaC,QAAQ,eAAgB,iBACrCb,EAAQc,KAAK,YAJjB,2BAUA,mBACER,UAAU,gBACVK,QAAS,WACPC,aAAaC,QAAQ,eAAgB,aACrCb,EAAQc,KAAK,YAJjB,gCAYN,qBACEN,MAAO,CAAEC,WAAY,OAAQM,YAAa,QAC1CT,UAAU,iBAFZ,SAIE,mBAAGK,QAAS,kBAzFpBC,aAAaI,WAAW,SACxBJ,aAAaI,WAAW,qBACxBhB,EAAQc,KAAK,WAuFL,8B,sBClGGG,EArBA,WACb,OAOE,aANA,CAMA,OAAKX,UAAU,QAAf,SACE,sBAAKY,MAAM,UAAX,UACE,qBAAKA,MAAM,OAAX,SACE,qBAAKA,MAAM,aAEb,qBAAKA,MAAM,OAAX,SACE,qBAAKA,MAAM,mBCkMNC,EApMQ,WACrB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMpB,EAAWC,cACjB,EAKIoB,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACa7C,EAJf,EAIE8C,UAAa9C,OAefmB,qBAAU,WACR4B,MACC,IACH,IAAMA,EAAkB,WACtB9D,EAAS,MAAOuB,GAAkBY,MAAK,SAAC7B,GACpB,KAAdA,EAAIU,SACNwC,GAAW,GACXF,EAAahD,EAAIF,MACjBgC,EAASR,EAAetB,EAAIF,YAgBlC,OACE,mCACImD,EA4IA,cAAC,EAAD,IA3IA,qCACE,oBAAIjB,UAAU,QAAd,iCACA,qBAAKA,UAAU,kBAAf,SACE,uBAAMyB,SAAUJ,GA1CD,SAACvD,GACxBJ,EAAS,OLGmB,WKHOI,GAAM+B,MAAK,SAAC7B,GAC3B,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CkC,IACAE,KACuB,KAAdxD,EAAIU,QACboB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBAmCxC,UACE,gCACE,uBAAOsC,QAAQ,gBAAf,4BACA,mCACEzB,GAAG,iBACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOmD,MAAQ,+DAsBpB,gCACE,uBAAOF,QAAQ,OAAf,qBAEA,mCACEtC,KAAK,OACLa,GAAG,QACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOoD,MAAQ,+DAepB,gCACE,uBAAOH,QAAQ,iBAAf,+BAEA,mCACEtC,KAAK,OACLa,GAAG,kBACCmB,EAAS,gBAAiB,CAAEO,UAAU,MAE5C,qBAAK3B,UAAU,aAAf,SACGvB,EAAOqD,eAAiB,+DAG7B,qBAAK5B,MAAO,CAAEC,WAAY,MAAO4B,UAAW,QAA5C,SACE,wBAAQ3C,KAAK,SAASY,UAAU,kBAAhC,2BAOe,GAApBe,EAAUiB,QACT,wBAAOhC,UAAU,oBAAjB,UACE,gCACE,+BACE,oBAAIiC,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,kBAIA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,4BACA,oBAAIA,MAAM,MAAV,0BAGJ,gCACGlB,EAAUmB,KACT,WAUEC,GAVF,IAEIC,EAFJ,EAEIA,WACAR,EAHJ,EAGIA,KAIAC,EAPJ,EAOIA,KACAC,EARJ,EAQIA,cARJ,OAYE,+BACE,oBAAIG,MAAM,MAAV,SAAiBG,IACjB,6BAAKR,IAIL,6BAAKC,IACL,6BAAKC,IACL,+BACE,cAAC,IAAD,CACE1B,GAAI,iBAAmBgC,EACvBpC,UAAU,OAFZ,SAIE,mBAAGA,UAAU,kBALjB,KAQE,sBACEK,QAAS,kBAxIbJ,EAwI8BmC,OAvI5CC,OAAOC,QAAQ,sCACjB5E,EAAS,SLpByB,YKoBYuC,GAAIJ,MAAK,SAAC7B,GACpC,KAAdA,EAAIU,SACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CoC,SALW,IAACvB,GAyIID,UAAU,sBAFZ,SAIE,mBACEA,UAAU,mBACVE,MAAO,CAAEqC,MAAO,oBAtBfJ,iBCvCdK,EArHI,WACjB,MAA8B1B,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAA0BJ,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KACM5C,EAAWC,cAEjB,EAKIoB,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACa7C,EAJf,EAIE8C,UAAa9C,OAGfmB,qBAAU,WACR+C,MACC,IACH,IAAMA,EAAc,WAClBjF,EAAS,MAAOqB,GAAcc,MAAK,SAAC7B,GAChB,KAAdA,EAAIU,SACNwC,GAAW,GACXwB,EAAS1E,EAAIF,MACbgC,EAASP,EAAWvB,EAAIF,YA2B9B,OACE,mCACImD,EA6DA,cAAC,EAAD,IA5DA,qCACE,oBAAIjB,UAAU,QAAd,6BACA,uBAAMyB,SAAUJ,GAhBC,SAACvD,GACxBJ,EAAS,ONtCe,OMsCOI,GAAM+B,MAAK,SAAC7B,GACvB,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CkC,IACAqB,KACuB,KAAd3E,EAAIU,QACboB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBAS1C,UACE,sBAAKY,UAAU,mBAAf,UACE,uBAAO0B,QAAQ,WAAW1B,UAAU,YAApC,yBAGA,mCACEZ,KAAK,OACLa,GAAG,WACH2C,YAAY,mBACRxB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOmD,MAAQ,+DAIpB,8BACE,wBAAQxC,KAAK,SAASY,UAAU,kBAAhC,yBAKa,GAAhByC,EAAMT,QACL,wBAAOhC,UAAU,oBAAjB,UACE,gCACE,+BACE,oBAAIiC,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,0BAGJ,gCACGQ,EAAMP,KAAI,WAAmBC,GAAnB,IAAGU,EAAH,EAAGA,OAAQjB,EAAX,EAAWA,KAAX,OACT,+BACE,oBAAIK,MAAM,MAAV,SAAiBY,IACjB,6BAAKjB,IACL,+BACE,cAAC,IAAD,CAAMxB,GAAI,aAAeyC,EAAQ7C,UAAU,OAA3C,SACE,mBAAGA,UAAU,kBAFjB,KAKE,sBACEK,QAAS,kBArEXJ,EAqE4B4C,OApE1CR,OAAOC,QAAQ,sCACjB5E,EAAS,SNzBqB,QMyBYuC,GAAIJ,MAAK,SAAC7B,GAChC,KAAdA,EAAIU,SACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CuD,SALW,IAAC1C,GAsEED,UAAU,sBAFZ,SAIE,mBACEA,UAAU,mBACVE,MAAO,CAAEqC,MAAO,oBAdfJ,iBCpGdW,EAAc,SAACC,GAA0B,IAAnBC,EAAkB,wDACnD,QAAaC,GAATF,GAA+B,MAATA,EAAe,CACvC,IAEIG,EAAO,IAAIC,KAAKJ,GAEhBK,EAAMF,EAAKG,UACXC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAON,EAAKO,cAIhB,OAFIH,EAAQ,KAAIA,EAAQ,IAAMA,GAC1BF,EAAM,KAAIA,EAAM,IAAMA,IACZ,IAAVJ,EACMI,EAAM,IAAME,EAAQ,IAAME,EAG1BA,EAAO,IAAMF,EAAQ,IAAMF,ICsH1BM,EA/HI,WACjB,IAAMhE,EAAUC,cAChB,EAAwBmB,mBAAS,IAAjC,mBAAOhD,EAAP,KAAa6F,EAAb,KACA,EAA8B7C,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACI0C,EAAQ,IAAIT,KAUhB,OATAS,EAAMC,QAAQD,EAAMP,UAAY,IAEhCzD,qBAAU,WACRlC,EAAS,MAAOiB,GAAMkB,MAAK,SAAC7B,GAC1BkD,GAAW,GACXyC,EAAQ3F,EAAIF,WAEb,IAGD,mCACImD,EAyGA,cAAC,EAAD,IAxGA,qCACE,qBAAKjB,UAAU,MAAf,SACE,qBAAKA,UAAU,4BAAf,SACE,8DAGJ,qBAAKA,UAAU,aAAf,SACkB,GAAflC,EAAKkE,OACJ,wBAAOhC,UAAU,wBAAjB,UACE,gCACE,+BACE,oBAAIiC,MAAM,MAAV,gBACA,oBAAIA,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,mCACA,oBAAIA,MAAM,MAAV,qCAGJ,gCACGnE,EAAKoE,KACJ,WAkBEC,GAlBF,IAEI2B,EAFJ,EAEIA,cAGAC,GALJ,EAGI3B,WAHJ,EAIIS,OAJJ,EAKIkB,MACAC,EANJ,EAMIA,SACAC,EAPJ,EAOIA,sBACAC,EARJ,EAQIA,WACAC,EATJ,EASIA,UACAC,EAVJ,EAUIA,MAEAC,GAZJ,EAWIC,qBAXJ,EAYID,qBACAE,EAbJ,EAaIA,iBACAC,EAdJ,EAcIA,aACAC,EAfJ,EAeIA,SACAC,EAhBJ,EAgBIA,uBAhBJ,OAoBE,cAAC,WAAD,UACY,GAATN,GACC,qBACEpE,UAAS,eACP4D,EAAQ,IAAIT,KAAKe,GAAjB,QAAyC,IAF7C,UAKE,oBAAIjC,MAAM,MAAV,SAAiB6B,IACjB,6BAAKU,IACL,6BAAKC,IACL,6BAAKV,IACL,6BAAKC,IACL,6BAAKC,IACL,+BAAKnB,EAAYoB,GAAjB,OACA,6BAAKpB,EAAYqB,KACjB,6BAAKO,IACL,6BAAK5B,EAAYuB,KACjB,6BAAKvB,EAAYyB,KAEjB,qBAAIvE,UAAU,iBAAd,UACoC,GAAjC0E,EAAuB1C,QACtB,wBACEhC,UAAU,UACVK,QAAS,kBACPX,EAAQc,KACN,iBAAmBsD,IAJzB,oBAWgC,GAAjCY,EAAuB1C,QACtB,wBACEhC,UAAU,UACVK,QAAS,kBACPX,EAAQc,KACN,gBAAkBsD,IAJxB,2BAjCK3B,WAqDvB,iDC5BCwC,EA7FiB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAK5C,OAJAC,YAAW,WACTzC,OAAO0C,QACPF,EAAa,MACZ,KAED,mCACE,sBACE5E,GAAG,gBACHC,MAAO,CAAE8E,MAAO,QAASC,OAAQ,iBAFnC,UAIE,sBACE/E,MAAO,CACLgF,UAAW,OACX/E,WAAY,OACZ4B,UAAW,MACXoD,WAAY,UACZC,SAAU,GACVC,WAAY,IACZC,SAAU,cARd,UAWE,gCACE,sBAAMpF,MAAO,CAAEC,WAAY,SAA3B,iBACA,uBACED,MAAO,CACLgF,UAAW,QACX/E,WAAY,QACZoF,MAAO,SAJX,gBAQMX,EAAU9C,oBAGlB,8BAGG8C,EAAUhD,OAEb,sBAAK1B,MAAO,CAAEoF,SAAU,cAAxB,UACGV,EAAUY,aADb,OAG2B,IAA1BZ,EAAUa,cACT,sBAAKvF,MAAO,CAAEoF,SAAU,cAAxB,UACGV,EAAUa,aADb,OAIyB,IAA1Bb,EAAUc,cACT,sBAAKxF,MAAO,CAAEoF,SAAU,cAAxB,UACGV,EAAUc,aADb,OAIF,8BAAMd,EAAU/C,OAChB,gCAAM+C,EAAUe,QAAhB,UAGF,qBACEzF,MAAO,CACL8E,MAAO,QACPC,OAAQ,kBACRW,OAAQ,YAIZ,sBACE1F,MAAO,CACLgF,UAAW,OACX/E,WAAY,OACZ0F,aAAc,MACdV,WAAY,UACZC,SAAU,IANd,UASE,8BACE,sBAAMlF,MAAO,CAAEC,WAAY,SAA3B,qBAQF,iDACA,qDACA,qDACA,yDC0MK2F,EAnRkB,WAC/B,MAAgChF,mBAAS,IAAzC,mBAAOiF,EAAP,KAAiBC,EAAjB,KACA,EAAgClF,mBAAS,IAAzC,mBAAOmF,EAAP,KAAiBC,EAAjB,KACA,EAA8BpF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAO8D,EAAP,KAAkBC,EAAlB,KACA,EAAsC/D,mBAAS,IAA/C,mBAAOqF,EAAP,KAAoBC,EAApB,KAEMtG,EAAWC,cACjB,EAKIoB,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACa7C,EAJf,EAIE8C,UAAa9C,OAGfmB,qBAAU,WACRyG,MACC,IACH,IAAMA,EAAiB,WACrB3I,EAAS,MAAOsB,GAA6Ba,MAAK,SAAC7B,GAC/B,KAAdA,EAAIU,SACNwC,GAAW,GACX8E,EAAYhI,EAAIF,MAChBoI,EAAYlI,EAAIF,MAChBgC,EAASN,EAAcxB,EAAIF,YAuCjC,OACE,mCACImD,EA4MA,cAAC,EAAD,IA3MA,qCACE,oBAAIjB,UAAU,QAAQC,GAAG,mBAAzB,wCAGgB,IAAfkG,GACC,qBAAKnG,UAAU,kBAAkBC,GAAG,mBAApC,SACE,uBAAMwB,SAAUJ,GAhCH,SAACvD,GACxBJ,EAAS,OVnC6B,qBUmCOI,GAAM+B,MAAK,SAAC7B,GACrC,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CkC,IACA+E,KACuB,KAAdrI,EAAIU,QACboB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBAyBtC,UACE,gCACE,uBAAOY,UAAU,WAAW0B,QAAQ,eAApC,mBAGA,mCACEtC,KAAK,OACLa,GAAG,eACH2C,YAAY,sBACRxB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOmD,MAAQ,+DAIpB,gCACE,uBAAOF,QAAQ,eAAf,wBACA,mCACEtC,KAAK,OACLa,GAAG,gBACCmB,EAAS,eAAgB,CAAEO,UAAU,MAE3C,qBAAK3B,UAAU,aAAf,SACGvB,EAAO+G,cAAgB,4DAE1B,8BACE,mCACEpG,KAAK,OACLY,UAAU,iCACNoB,EAAS,eAAgB,CAAEO,UAAU,QAG7C,8BACE,mCACEvC,KAAK,OACLY,UAAU,iCACNoB,EAAS,eAAgB,CAAEO,UAAU,WAI/C,gCACE,uBAAOD,QAAQ,OAAf,eAEA,mCACEtC,KAAK,OACLa,GAAG,QACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOoD,MAAQ,+DAGpB,gCACE,uBAAOH,QAAQ,UAAf,qBAEA,mCACEtC,KAAK,OACLa,GAAG,WACCmB,EAAS,UAAW,CAAEO,UAAU,MAEtC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOkH,SAAW,+DAGvB,gCACE,uBAAOjE,QAAQ,iBAAf,+BAEA,mCACEtC,KAAK,OACLa,GAAG,kBACCmB,EAAS,gBAAiB,CAAEO,UAAU,MAE5C,qBAAK3B,UAAU,aAAf,SACGvB,EAAOqD,eACN,+DAIN,qBAAK5B,MAAO,CAAEC,WAAY,MAAO4B,UAAW,QAA5C,SACE,wBAAQ3C,KAAK,SAASY,UAAU,kBAAhC,2BAOR,qBAAKA,UAAU,gBAAgBC,GAAG,mBAAlC,SACE,sBAAMW,MAAM,cAAZ,SACE,sBAAKA,MAAM,0BAAX,UACE,uBAAO0F,IAAI,iBAAiB1F,MAAM,UAAlC,sBAGA,uBACEZ,UAAU,eACVZ,KAAK,OACLwD,YAAY,SACZ2D,SAAU,SAACC,GAAD,OArHP,SAACA,GAClBJ,EAAeI,EAAEC,OAAO1D,OACxB,IAAI2D,EAAc,GAClBT,EAASU,QAAO,SAAC5D,GACXA,EAAMnB,KAAKgF,cAAcC,SAASL,EAAEC,OAAO1D,MAAM6D,gBACnDF,EAAYlG,KAAKuC,MAGrBiD,EAAYU,GA6GmBI,CAAWN,MAE9B,wBAAQpH,KAAK,SAASwB,MAAM,uBAA5B,2BAOc,GAAnBmF,EAAS/D,QACR,wBAAOhC,UAAU,qBAAqBC,GAAG,mBAAzC,UACE,gCACE,+BACE,oBAAIgC,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,kBAGA,oBAAIA,MAAM,MAAV,kBAEA,oBAAIA,MAAM,MAAV,4BACA,oBAAIA,MAAM,MAAV,0BAGJ,gCACG8D,EAAS7D,KACR,WAWEC,GAXF,IAEImC,EAFJ,EAEIA,qBACA1C,EAHJ,EAGIA,KACA4D,EAJJ,EAIIA,aACAC,EALJ,EAKIA,aACAC,EANJ,EAMIA,aACA7D,EAPJ,EAOIA,KACA8D,EARJ,EAQIA,QACA7D,EATJ,EASIA,cATJ,OAaE,+BACE,oBAAIG,MAAM,MAAV,SAAiBqC,IACjB,6BAAK1C,IAIL,6BAAK+D,IACL,6BAAK7D,IACL,+BACE,sBACE9B,UAAU,sBACVK,QAAS,WACPwE,EAAa,CACXjD,KAAMA,EACN4D,aAAcA,EACdC,aAAcA,EACdC,aAAcA,EACd7D,KAAMA,EACN8D,QAASA,EACT7D,cAAeA,KAVrB,SAcE,mBACE9B,UAAU,eACVE,MAAO,CAAEqC,MAAO,eAjBtB,KAqBE,cAAC,IAAD,CACEnC,GAAI,2BAA6BkE,EACjCtE,UAAU,OAFZ,SAIE,mBAAGA,UAAU,kBAzBjB,KA4BE,sBACEK,QAAS,kBAvNbJ,EAuN8BqE,OAtN5CjC,OAAOC,QAAQ,sCACjB5E,EAAS,SVrBwB,sBUqBYuC,GAAIJ,MAAK,SAAC7B,GACnC,KAAdA,EAAIU,SACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CiH,SALW,IAACpG,GAwNID,UAAU,sBAFZ,SAIE,mBACEA,UAAU,mBACVE,MAAO,CAAEqC,MAAO,oBA1CfJ,WAoDnB,qBAAKjC,MAAO,CAAE8E,MAAO,MAAOY,OAAQ,QAApC,SACoC,GAAjCmB,OAAOC,KAAKpC,GAAW5C,QACtB,cAAC,EAAD,CACE4C,UAAWA,EACXC,aAAcA,Y,QCpDfoC,EA7NK,SAAC,GAAwC,IAAtCnJ,EAAqC,EAArCA,KAAMoJ,EAA+B,EAA/BA,aAAchD,EAAiB,EAAjBA,WACnCiD,EAAgBC,aACpB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB/H,cAerC,OACE,qCAuEE,sBAAKU,GAAG,gBAAR,UACE,sBAAKD,UAAU,UAAf,UACE,sBAAKA,UAAU,YAAf,UACE,+CACA,mDAEF,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAKuH,IAAKrJ,yCAAuCsJ,IAAI,YAEvD,sBAAKxH,UAAU,eAAf,UACE,qBAAKA,UAAU,gBAAf,wDAGA,qBAAKA,UAAU,eAAf,0CACA,qBAAKA,UAAU,OAAf,kEAON,sBAAKY,MAAM,iBAAX,UACE,qBAAKZ,UAAU,kBAAf,SACE,sBAAKY,MAAM,QAAX,UACE,qBAAKZ,UAAU,UAAf,mBACA,sBAAKA,UAAU,kBAAf,UACE,8BACE,mBAAGA,UAAU,kBAAb,SAAgCkH,EAAatF,SAE/C,8BACE,4BAAIsF,EAAa1B,iBAEnB,8BACE,4BAAI0B,EAAazB,iBAEnB,8BACE,8BACGyB,EAAarF,KADhB,KACwBqF,EAAavB,aAGvC,8BACE,oCAAOuB,EAAapF,2BAK5B,sBAAK9B,UAAU,kBAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,sBAAKY,MAAM,QAAX,qBACU,wCAEV,sBAAKA,MAAM,QAAX,kBAEE,qBAAKZ,UAAU,OAAf,SACmB,IAAhBlC,EAAK,GAAGoF,KACLJ,EAAYoB,GACZpB,EAAYhF,EAAK,GAAGoF,cAI9B,qBAAKtC,MAAM,QAAX,SACE,4CACa,mDAKnB,sBAAKZ,UAAU,yBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,YAAf,qBACA,qBAAKA,UAAU,YAAf,mCACA,qBAAKA,UAAU,WAAf,mBACA,qBAAKA,UAAU,aAAf,oBACA,qBAAKA,UAAU,oBAEjB,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qCAEF,sBAAKA,UAAU,YAAf,UACE,4BArKY,SAACC,GACvB,IAAIwE,EAAW,GAQf,OAP4B,GAAxB0C,EAAcnF,QAChBmF,EAAcM,MAAK,SAACC,GACdA,EAAS7E,QAAU5C,IACrBwE,EAAWiD,EAAS9F,SAInB6C,EA4JOkD,CAAgB7J,EAAK,GAAG8J,eAC5B,8BACE,oBAAG5H,UAAU,iBAAb,wBACc,IACZ,qCAAwB,IAAhBlC,EAAK,GAAG+J,KAAa,IAAM/J,EAAK,GAAG+J,gBASjD,qBAAK7H,UAAU,WAAf,SACE,oCAEF,qBAAKA,UAAU,aAAf,SACE,sCAEF,sBAAKA,UAAU,wBAAf,UACE,8BACE,mBAAGA,UAAU,iBAAb,4BAEF,oEACA,gCACE,qCACA,uCACA,gDAIN,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,cAAf,mBACA,qBAAKA,UAAU,aAAf,eACA,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,6BAGnB,qBAAKA,UAAU,aAAf,uCAEF,wBACEK,QAAS,SAACmG,GAAD,OAAOnE,OAAO0C,SACvBnE,MAAM,eACNX,GAAG,eAHL,uBC6GS6H,EA9TM,WACnB,IAAMhI,EAAWC,cAEXgI,EAAoBX,aACxB,SAACC,GAAD,OAAWA,EAAMC,kBAAkBhI,kBAE/B6H,EAAgBC,aACpB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB/H,cAErC,EAA8CuB,mBAAS,IAAvD,mBAAOkH,EAAP,KAAwBC,EAAxB,KACA,EAAsCnH,mBAAS,IAA/C,mBAAOoH,EAAP,KAAoBC,EAApB,KACA,EAAgDrH,mBAAS,IAAzD,mBAAOsH,EAAP,KAAyBC,EAAzB,KACA,EAAyDvH,mBAAS,IAAlE,mBAAOwH,EAAP,KAA6BC,EAA7B,KACA,EAAkCzH,mBAAS,CACzC,CACE8G,YAAa,GACbC,KAAM,GACN3E,KAAM,GACNc,SAAU,EACVwE,sBAAuB,GACvBC,UAAW,MAPf,mBAAOC,EAAP,KAAkBC,EAAlB,KAUA/I,qBAAU,WACRqI,EAAmBF,GACnBI,EAAehB,KACd,CAACY,EAAmBZ,IAEvB,MAAoCrG,mBAAS,IAA7C,mBAAOoD,EAAP,KAAmB0E,EAAnB,KAEAhJ,qBAAU,WACR,IAAIsD,EAAO,IAAIC,KACXC,EAAMF,EAAKG,UACXC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAON,EAAKO,cAEZH,EAAQ,KAAIA,EAAQ,IAAMA,GAC1BF,EAAM,KAAIA,EAAM,IAAMA,GAI1BwF,EAFQpF,EAAO,IAAMF,EAAQ,IAAMF,KAGlC,IAEHxD,qBAAU,WACRoI,EAAgBP,MAAK,SAAC1E,GAChBA,EAAMnB,MAAQwG,GAChBG,EAAyBxF,QAG5B,CAACqF,IAEJ,IAAMS,EAAoB,SAACrC,EAAGsC,GAC5B,MAAwBtC,EAAEC,OAAlB7E,EAAR,EAAQA,KAAMmB,EAAd,EAAcA,MACRgG,EAAI,YAAOL,GACjBK,EAAKD,GAAOlH,GAAQmB,EACpB4F,EAAaI,IASTC,EAAiB,WACrBL,EAAa,GAAD,mBACPD,GADO,CAEV,CACEd,YAAa,GACbC,KAAM,GACN3E,KAAM,GACNc,SAAU,EACVwE,sBAAuB,GACvBC,UAAW,QA4CjB,OACE,qCACE,sBAAKxI,GAAG,mBAAR,UACE,oBAAID,UAAU,cAAd,+BACA,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,eAAf,UACE,mDACA,uBACE+I,KAAK,YACLnH,KAAK,eACL5B,UAAU,eACV4C,YAAY,sBACZ2D,SAAU,SAACC,GAAD,OAAO6B,EAAoB7B,EAAEC,OAAO1D,QAC9CpB,UAAQ,IAEV,0BAAU1B,GAAG,YAAb,SACG+H,EAAgB9F,KAAI,WAAWC,GAAX,IAAGP,EAAH,EAAGA,KAAH,OACnB,wBAAQmB,MAAOnB,GAAWO,aAKF,GAA/BmG,EAAqBtG,QACpB,qCACE,sBAAKhC,UAAU,kBAAf,UACE,uBAAO0B,QAAQ,eAAf,uBACA,uBACEtC,KAAK,OACLY,UAAU,eACV4C,YAAY,iBACZqG,aAAcX,EAAqB9C,aACnC0D,UAAQ,OAGZ,qBAAKlJ,UAAU,aAAf,SACE,uBACEZ,KAAK,OACLY,UAAU,eACV4C,YAAY,iBACZqG,aAAcX,EAAqB7C,aACnCyD,UAAQ,MAGZ,qBAAKlJ,UAAU,aAAf,SACE,uBACEZ,KAAK,OACLY,UAAU,eACV4C,YAAY,OACZqG,aAAcX,EAAqBzG,KACnCqH,UAAQ,MAGZ,sBAAKlJ,UAAU,WAAf,UACE,sBAAKA,UAAU,MAAf,UACE,iDACA,uBACEZ,KAAK,OACLwC,KAAK,cACL5B,UAAU,eACV4C,YAAY,cACZqG,aAAcX,EAAqB3C,QACnCuD,UAAQ,OAGZ,sBAAKlJ,UAAU,MAAf,UACE,kDACA,uBACEZ,KAAK,OACLY,UAAU,eACV4C,YAAY,gBACZqG,aAAcX,EAAqBxG,cACnCoH,UAAQ,aAOlB,uBAAMzH,SArHa,SAAC+E,GAExB,GADAA,EAAE2C,iBACsB,GAApBT,EAAU1G,OAAa,CACzB,IAAIlE,EAAO,CACTsE,WAAYkG,EAAqBlG,WACjCS,OAAQuG,SAASV,EAAU,GAAGd,aAC9B7D,KAAM2E,EAAU,GAAGb,KACnB5D,sBAAuByE,EAAU,GAAGF,sBACpCxE,SAAU0E,EAAU,GAAG1E,SACvBE,WAAiC,IAArBwE,EAAU,GAAGxF,KAAagB,EAAawE,EAAU,GAAGxF,KAChEiB,UAAWuE,EAAU,GAAGD,WAE1B/K,EAAS,OAAQmB,EAAQf,GAAM+B,MAAK,SAAC7B,GACjB,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,gBAI9CsJ,EAAU1G,OAAS,GACrB0G,EAAUxG,KAAI,SAACa,GACb,IAAIjF,EACJA,EAAO,CACLsE,WAAYkG,EAAqBlG,WACjCS,OAAQuG,SAASrG,EAAM6E,aACvB7D,KAAMhB,EAAM8E,KACZ5D,sBAAuBlB,EAAMyF,sBAC7BxE,SAAUjB,EAAMiB,SAChBE,WAA0B,IAAdnB,EAAMG,KAAagB,EAAanB,EAAM,GAAGG,KACrDiB,UAAWpB,EAAM0F,WAEnB/K,EAAS,OAAQmB,EAAQf,GAAM+B,MAAK,SAAC7B,GACjB,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,oBAqFdY,UAAU,OAA5C,UACG0I,EAAUxG,KAAI,SAACmH,EAAGC,GACjB,OACE,sBAAKtJ,UAAU,MAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,uBAAO0B,QAAQ,cAAf,2BACA,yBACEE,KAAK,cACL3B,GAAG,cACHD,UAAU,eACV+C,MAAOsG,EAAEzB,YACTrB,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAG8C,IACtC3H,UAAQ,EANV,UAQE,wBAAQoB,MAAM,GAAd,yCACCmF,EAAYhG,KAAI,WAAmBC,GAAnB,IAAGP,EAAH,EAAGA,KAAMiB,EAAT,EAASA,OAAT,OACf,wBAAQE,MAAOF,EAAf,SACGjB,GADyBO,YAMlC,sBAAKnC,UAAU,sBAAf,UACE,uBAAO0B,QAAQ,YAAf,wBACA,uBACEtC,KAAK,SACLwC,KAAK,WACL5B,UAAU,eACV4C,YAAY,yBACZG,MAAOsG,EAAErF,SACTuC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAG8C,IACtC3H,UAAQ,OAGZ,sBAAK3B,UAAU,sBAAf,UACE,uBAAO0B,QAAQ,aAAf,sBACA,uBACEtC,KAAK,OACLwC,KAAK,OACL5B,UAAU,gBACV4C,YAAY,WACZG,MAAOsG,EAAExB,KACTtB,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAG8C,SAG1C,sBAAKtJ,UAAU,sBAAf,UACE,gDAEA,uBACEZ,KAAK,OACLwC,KAAK,wBACL5B,UAAU,eACV4C,YAAY,4BACZG,MAAOsG,EAAEb,sBACTjC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAG8C,SAG1C,qBAAKtJ,UAAU,sBAAf,SACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,mDAEA,uBACEZ,KAAK,OACLwC,KAAK,OACL5B,UAAU,0BACV+C,MAAiB,IAAVsG,EAAEnG,KAAagB,EAAamF,EAAEnG,KACrCqD,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAG8C,SAG1C,sBAAKtJ,UAAU,YAAf,UACE,gDAEA,uBACEZ,KAAK,OACLwC,KAAK,YACL5B,UAAU,2BACV+C,MAAOsG,EAAEZ,UACTlC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,EAAG8C,cAK9C,sBAAKtJ,UAAU,2BAAf,UACuB,GAApB0I,EAAU1G,QACT,wBACE5C,KAAK,SACLY,UAAU,iBACVK,QAAS,kBAjOH,SAACyI,GACzB,IAAMC,EAAI,YAAOL,GACjBK,EAAKQ,OAAOT,EAAO,GACnBH,EAAaI,GA8NoBS,CAAkBF,IAHnC,oBAQDZ,EAAU1G,OAAS,GAAKsH,GACvB,wBACEjJ,QAAS2I,EACThJ,UAAU,kBACVZ,KAAK,SAHP,sBA3FoBkK,MAuG9B,qBAAKtJ,UAAU,OAAf,SACE,wBAAQZ,KAAK,SAASY,UAAU,kBAAhC,4BAMN,cAAC,EAAD,CACElC,KAAM4K,EACNxB,aAAcoB,EACdpE,WAAYA,QClPLuF,EAnEE,WACf,MAA8B3I,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAKIC,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAqI,EAHF,EAGEA,SACajL,EAJf,EAIE8C,UAAa9C,OAETqB,EAAWC,cACXL,EAAUC,cACVgK,EAAcvC,aAClB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB/H,cAE/BqK,EAASC,cACfjK,qBAAU,WACR+J,EAAYlC,MAAK,SAAC1E,GACZA,EAAMF,QAAU+G,EAAO3J,KACzBiB,GAAW,GACXwI,EAAS,OAAQ3G,EAAMnB,YAG1B,CAAC+H,IAEJ,IAAMG,EAAgB,uCAAG,WAAOhM,GAAP,SAAAD,EAAA,sDACvBH,EAAS,QbnBqB,QamBSkM,EAAO3J,GAAInC,GAAM+B,MAAK,SAAC7B,GAC1C,KAAdA,EAAIU,SACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CM,EAAQc,KAAK,mBAJM,2CAAH,sDAStB,OACE,mCACIS,EA0BA,cAAC,EAAD,IAzBA,qCACE,oBAAIjB,UAAU,QAAd,uBAEA,uBAAMyB,SAAUJ,EAAayI,GAA7B,UACE,sBAAK9J,UAAU,mBAAf,UACE,uBAAO0B,QAAQ,WAAW1B,UAAU,YAApC,yBAGA,mCACEZ,KAAK,OACLa,GAAG,YACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOmD,MAAQ,+DAGpB,8BACE,wBAAQxC,KAAK,SAASY,UAAU,kBAAhC,+BCqEC+J,EA3HK,WAClB,MAA8BjJ,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAKIC,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAqI,EAHF,EAGEA,SACajL,EAJf,EAIE8C,UAAa9C,OAETqB,EAAWC,cACXL,EAAUC,cACVH,EAAgB4H,aACpB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB9H,iBAE/BoK,EAASC,cACfjK,qBAAU,WACRJ,EAAciI,MAAK,SAAC1E,GACdA,EAAMuB,sBAAwBsF,EAAO3J,KACvCiB,GAAW,GACXwI,EAAS,OAAQ3G,EAAMnB,MACvB8H,EAAS,eAAgB3G,EAAMyC,cAC/BkE,EAAS,eAAgB3G,EAAM0C,cAC/BiE,EAAS,OAAQ3G,EAAMlB,MACvB6H,EAAS,UAAW3G,EAAM4C,SAC1B+D,EAAS,gBAAiB3G,EAAMjB,qBAGnC,CAACtC,IAWJ,OACE,mCACIyB,EA6EA,cAAC,EAAD,IA5EA,qCACE,oBAAIjB,UAAU,QAAd,sCACA,qBAAKA,UAAU,kBAAf,SACE,uBAAMyB,SAAUJ,GAfD,SAACvD,GACxBJ,EAAS,QdhBwB,sBcgBSkM,EAAO3J,GAAInC,GAAM+B,MAAK,SAAC7B,GAC7C,KAAdA,EAAIU,SACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CM,EAAQc,KAAK,oCAWT,UACE,gCACE,uBAAOkB,QAAQ,gBAAf,2BACA,mCACEzB,GAAG,iBACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOmD,MAAQ,+DAGpB,gCACE,uBAAOF,QAAQ,eAAf,wBACA,mCACEtC,KAAK,OACLa,GAAG,gBACCmB,EAAS,eAAgB,CAAEO,UAAU,MAE3C,qBAAK3B,UAAU,aAAf,SACGvB,EAAO+G,cAAgB,4DAE1B,8BACE,mCACEpG,KAAK,OACLY,UAAU,iCACNoB,EAAS,eAAgB,CAAEO,UAAU,WAI/C,gCACE,uBAAOD,QAAQ,OAAf,qBACA,mCACEtC,KAAK,OACLa,GAAG,QACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOoD,MAAQ,+DAGpB,gCACE,uBAAOH,QAAQ,UAAf,wBAEA,mCACEtC,KAAK,OACLa,GAAG,WACCmB,EAAS,UAAW,CAAEO,UAAU,MAEtC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOkH,SAAW,+DAGvB,gCACE,uBAAOjE,QAAQ,iBAAf,+BAEA,mCACEtC,KAAK,OACLa,GAAG,kBACCmB,EAAS,gBAAiB,CAAEO,UAAU,MAE5C,qBAAK3B,UAAU,aAAf,SACGvB,EAAOqD,eAAiB,+DAG7B,qBAAK5B,MAAO,CAAEC,WAAY,MAAO4B,UAAW,QAA5C,SACE,wBAAQ3C,KAAK,SAASY,UAAU,kBAAhC,iCCaDgK,EA1HM,WACnB,MAA8BlJ,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMpB,EAAWC,cACjB,EAKIoB,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAqI,EAHF,EAGEA,SACajL,EAJf,EAIE8C,UAAa9C,OAETiB,EAAUC,cACVsK,EAAkB7C,aACtB,SAACC,GAAD,OAAWA,EAAMC,kBAAkBhI,kBAE/BsK,EAASC,cACfjK,qBAAU,WACRqK,EAAgBxC,MAAK,SAAC1E,GAChBA,EAAMX,YAAcwH,EAAO3J,KAC7BiB,GAAW,GACXwI,EAAS,OAAQ3G,EAAMnB,MAIvB8H,EAAS,OAAQ3G,EAAMlB,MACvB6H,EAAS,gBAAiB3G,EAAMjB,qBAGnC,CAACmI,IAUJ,OACE,mCACIhJ,EA8EA,cAAC,EAAD,IA7EA,qCACE,oBAAIjB,UAAU,QAAd,2BACA,qBAAKA,UAAU,kBAAf,SACE,uBAAMyB,SAAUJ,GAdD,SAACvD,GACxBJ,EAAS,QfPyB,YeOSkM,EAAO3J,GAAInC,GAAM+B,MAAK,SAAC7B,GAC9C,KAAdA,EAAIU,SACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CM,EAAQc,KAAK,0BAUT,UACE,gCACE,uBAAOkB,QAAQ,gBAAf,4BACA,mCACEzB,GAAG,iBACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOmD,MAAQ,+DAqBpB,gCACE,uBAAOF,QAAQ,OAAf,qBAEA,mCACEtC,KAAK,OACLa,GAAG,QACCmB,EAAS,OAAQ,CAAEO,UAAU,MAEnC,qBAAK3B,UAAU,aAAf,SACGvB,EAAOoD,MAAQ,+DAepB,gCACE,uBAAOH,QAAQ,iBAAf,+BAEA,mCACEtC,KAAK,OACLa,GAAG,kBACCmB,EAAS,gBAAiB,CAAEO,UAAU,MAE5C,qBAAK3B,UAAU,aAAf,SACGvB,EAAOqD,eAAiB,+DAG7B,qBAAK5B,MAAO,CAAEC,WAAY,MAAO4B,UAAW,QAA5C,SACE,wBAAQ3C,KAAK,SAASY,UAAU,kBAAhC,iC,QC6CDkK,EA1JM,WACnB,IAAMpK,EAAWC,cACjB,EAA8Be,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOhD,EAAP,KAAa6F,EAAb,KACMiG,EAASC,cAEfjK,oBAAS,sBAAC,sBAAA/B,EAAA,sDACRH,EAAS,MAAOkB,EAA4BgL,EAAO3J,GAAInC,GAAM+B,MAAK,SAAC7B,GAC/C,KAAdA,EAAIU,SACNwC,GAAW,GACXyC,EAAQ3F,EAAIF,UAJR,2CAOP,IAEH,IAAMqM,EAAmB/C,aACvB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB9H,iBAErC,EAAsCsB,mBAAS,CAC7CwD,qBAAsB,GACtBD,oBAAqB,IAAIlB,KACzBoB,iBAAkB,KAHpB,mBAAO6F,EAAP,KAAoBC,EAApB,KAMMxB,EAAoB,SAACrC,GACzB,MAAwBA,EAAEC,OAAlB7E,EAAR,EAAQA,KAAMmB,EAAd,EAAcA,MACdsH,EAAe,2BACVD,GADS,kBAEXxI,EAAOmB,MAeZ,OACE,mCACI9B,EAuGA,cAAC,EAAD,IAtGA,qCACkB,GAAfnD,EAAKkE,QACJ,wBAAOhC,UAAU,QAAjB,UACE,uBAAOA,UAAU,cAAjB,SACE,+BACE,oBAAIiC,MAAM,MAAV,gBACA,oBAAIA,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,mBAEA,oBAAIA,MAAM,MAAV,8BAGJ,gCACGnE,EAAKoE,KACJ,WASEC,GATF,IAEI2B,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,KACAC,EAJJ,EAIIA,SACAE,EALJ,EAKIA,WACAM,EANJ,EAMIA,aACAC,EAPJ,EAOIA,SAPJ,OAWE,+BACE,oBAAIxC,MAAM,MAAV,SAAiB6B,IACjB,6BAAKU,IACL,6BAAKC,IACL,6BAAKT,IACL,6BAAKD,IACL,6BAAKjB,EAAYoB,OANV/B,WAcnB,8BACE,oBAAInC,UAAU,cAAd,wCAGF,uBAAMyB,SA3DW,SAAC+E,GACxBA,EAAE2C,iBACF,IAAIrL,EAAOsM,EAEX1M,EAAS,QAASoB,EAAS8K,EAAO3J,GAAInC,GAAM+B,MAAK,SAAC7B,GAC9B,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBAqD1C,UACE,sBAAKY,UAAU,MAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,uBAAO0B,QAAQ,uBAAf,uCAGA,yBACEE,KAAK,uBACL3B,GAAG,uBACHD,UAAU,eACV+C,MAAOqH,EAAY9F,qBACnBiC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,IACnC7E,UAAQ,EANV,UAQE,wBAAQoB,MAAM,GAAd,yCACCoH,EAAiBjI,KAChB,WAAiCC,GAAjC,IAAGP,EAAH,EAAGA,KAAM0C,EAAT,EAASA,qBAAT,OACE,wBAAQvB,MAAOuB,EAAf,SACG1C,GADuCO,YAQlD,sBAAKnC,UAAU,sBAAf,UACE,2DAEA,uBACEZ,KAAK,OACLwC,KAAK,sBACL5B,UAAU,eACV+C,MAAOD,EAAYsH,EAAY/F,qBAAqB,GACpDkC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,IACnC7E,UAAQ,OAGZ,sBAAK3B,UAAU,sBAAf,UACE,wDAEA,uBACEZ,KAAK,OACLwC,KAAK,mBACL5B,UAAU,eACV+C,MAAOqH,EAAY7F,iBACnBgC,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,YAIzC,8BACE,wBAAQpH,KAAK,SAASY,UAAU,uBAAhC,+BC0HCsK,EA7QM,SAAC,GAA2B,IAAzBxM,EAAwB,EAAxBA,KAAMsM,EAAkB,EAAlBA,YAE5B,OADAG,QAAQC,IAAI1M,EAAMsM,GAEhB,qCACkB,GAAftM,EAAKkE,QACJ,sBAAK/B,GAAG,gBAAR,UACE,sBAAKD,UAAU,UAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBACEuH,IAAKrJ,yCACL8G,MAAM,OACNyF,OAAO,OACPjD,IAAI,YAGR,gCAME,qBAAKxH,UAAU,gBAAf,mDAGA,qBAAKA,UAAU,eAAf,gDAOJ,sBAAKY,MAAM,iBAAX,UACE,qBAAKZ,UAAU,kBAAf,SACE,sBAAKY,MAAM,QAAX,UACE,qBAAKZ,UAAU,eAAf,mBACA,sBAAKA,UAAU,kBAAf,UACE,8BACE,mBAAGA,UAAU,kBAAb,SAAgClC,EAAK,GAAG0G,iBAQ1C,8BACE,4BACG1G,EAAK,GAAG4M,iBAIb,8BACE,oCAAO5M,EAAK,GAAG6M,mCAKvB,sBAAK3K,UAAU,kBAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKY,MAAM,QAAX,sBACA,sBAAKA,MAAM,aAAX,kBAEE,qBAAKZ,UAAU,OAAf,SAAuB8C,EAAY,IAAIK,cAG3C,qBAAKvC,MAAM,aAAX,SACE,6CAEE,+BAAOkC,EAAYhF,EAAK,GAAGoG,yBAKnC,sBAAKlE,UAAU,yBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,YAAf,qBACA,qBAAKA,UAAU,YAAf,mCACA,qBAAKA,UAAU,WAAf,mBACA,qBAAKA,UAAU,aAAf,oBACA,qBAAKA,UAAU,oBAEjB,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qCAEF,sBAAKA,UAAU,YAAf,UACE,8BAAIlC,EAAK,GAAG2G,SAAZ,OACA,8BACE,oBAAGzE,UAAU,iBAAb,wBAEE,qCAAwB,IAAhBlC,EAAK,GAAGiG,KAAa,IAAMjG,EAAK,GAAGiG,aAG/C,8BACE,2CACa,IACX,iCACG,IACuB,IAAvBqG,EAAYQ,QAAgB,IAAMR,EAAYQ,mBAKvD,qBAAK5K,UAAU,WAAf,SACE,oCAEF,qBAAKA,UAAU,aAAf,SACE,sCAEF,sBAAKA,UAAU,wBAAf,UACE,8BACE,mBAAGA,UAAU,iBAAb,4BAEF,oEACA,gCACE,qBAAKE,MAAO,CAAEC,WAAY,OAA1B,kBACA,qBAAKD,MAAO,CAAEC,WAAY,OAA1B,oBACA,qBAAKD,MAAO,CAAEC,WAAY,OAA1B,wCAIN,sBAAKH,UAAU,sBAAf,UACE,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,mBAAf,mBACA,qBAAKA,UAAU,aAAf,eACA,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,gCAMP,GAAflC,EAAKkE,QACJ,sBAAK/B,GAAG,gBAAR,UACE,sBAAMD,UAAU,OAAhB,6IAIA,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBACEuH,IAAKrJ,yCACL8G,MAAM,OACNyF,OAAO,OACPjD,IAAI,YAGR,gCAME,qBAAKxH,UAAU,gBAAf,mDAGA,qBAAKA,UAAU,eAAf,gDAGJ,sBAAKY,MAAM,iBAAX,UACE,qBAAKZ,UAAU,kBAAf,SACE,sBAAKY,MAAM,QAAX,UACE,qBAAKZ,UAAU,eAAf,mBACA,sBAAKA,UAAU,kBAAf,UACE,8BACE,mBAAGA,UAAU,kBAAb,SAAgClC,EAAK,GAAG0G,iBAQ1C,8BACE,4BACG1G,EAAK,GAAG4M,iBAIb,8BACE,oCAAO5M,EAAK,GAAG6M,mCAKvB,sBAAK3K,UAAU,kBAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKY,MAAM,QAAX,sBACA,sBAAKA,MAAM,aAAX,kBAEE,qBAAKZ,UAAU,OAAf,SAAuB8C,EAAY,IAAIK,cAG3C,qBAAKvC,MAAM,aAAX,SACE,8CACe,+BAAOkC,EAAYhF,EAAK,GAAGoG,yBAKhD,sBAAKlE,UAAU,yBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,YAAf,qBACA,qBAAKA,UAAU,YAAf,mCACA,qBAAKA,UAAU,WAAf,mBACA,qBAAKA,UAAU,aAAf,oBACA,qBAAKA,UAAU,oBAEjB,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qCAEF,sBAAKA,UAAU,YAAf,UACE,8BAAIlC,EAAK,GAAG2G,SAAZ,OACA,8BACE,oBAAGzE,UAAU,iBAAb,wBAEE,qCAAwB,IAAhBlC,EAAK,GAAGiG,KAAa,IAAMjG,EAAK,GAAGiG,aAG/C,8BACE,2CACa,IACX,iCACG,IACuB,IAAvBqG,EAAYQ,QAAgB,IAAMR,EAAYQ,mBAKvD,qBAAK5K,UAAU,WAAf,SACE,oCAEF,qBAAKA,UAAU,aAAf,SACE,sCAEF,sBAAKA,UAAU,wBAAf,UACE,8BACE,mBAAGA,UAAU,iBAAb,4BAEF,oEACA,gCACE,qBAAKE,MAAO,CAAEC,WAAY,OAA1B,kBACA,qBAAKD,MAAO,CAAEC,WAAY,OAA1B,oBACA,qBAAKD,MAAO,CAAEC,WAAY,OAA1B,sCAIN,sBAAKH,UAAU,sBAAf,UACE,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,mBAAf,mBACA,qBAAKA,UAAU,aAAf,eACA,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,gCAMvB,wBACEK,QAAS,SAACmG,GAAD,OAAOnE,OAAO0C,SACvBnE,MAAM,eACNX,GAAG,uBAHL,uBClFS4K,EA1KM,WACnB,IAAM/K,EAAWC,cACjB,EAA8Be,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEM0I,EAASC,cACf,EAAsC/I,mBAAS,CAC7CgK,sBAAuB,IAAI3H,KAC3ByH,QAAS,GACTG,eAAgB,GAChBC,YAAa,GACbC,cAAe,KALjB,mBAAOb,EAAP,KAAoBC,EAApB,KAOA,EAAwBvJ,mBAAS,IAAjC,mBAAOhD,EAAP,KAAa6F,EAAb,KAEA/D,oBAAS,sBAAC,sBAAA/B,EAAA,sDACRH,EAAS,MAAOkB,EAA4BgL,EAAO3J,GAAInC,GAAM+B,MAAK,SAAC7B,GAC/C,KAAdA,EAAIU,SACNwC,GAAW,GACXyC,EAAQ3F,EAAIF,UAJR,2CAOP,IACH,IAAM+K,EAAoB,SAACrC,GACzB,MAAwBA,EAAEC,OAAlB7E,EAAR,EAAQA,KAAMmB,EAAd,EAAcA,MACdsH,EAAe,2BACVD,GADS,kBAEXxI,EAAOmB,MAcZ,OACE,mCACI9B,EA0HA,cAAC,EAAD,IAzHA,qCACkB,GAAfnD,EAAKkE,QACJ,wBAAOhC,UAAU,QAAQC,GAAG,mBAA5B,UACE,uBAAOD,UAAU,cAAjB,SACE,+BACE,oBAAIiC,MAAM,MAAV,gBACA,oBAAIA,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,wCAGJ,gCACGnE,EAAKoE,KACJ,WAWEC,GAXF,IAEI2B,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,KACAC,EAJJ,EAIIA,SACAE,EALJ,EAKIA,WACAM,EANJ,EAMIA,aACAC,EAPJ,EAOIA,SACAC,EARJ,EAQIA,uBACAL,EATJ,EASIA,oBATJ,OAaE,+BACE,oBAAIpC,MAAM,MAAV,SAAiB6B,IACjB,6BAAKU,IACL,6BAAKC,IACL,6BAAKT,IACL,6BAAKD,IACL,6BAAKjB,EAAYoB,KACjB,6BAAKQ,IACL,6BAAK5B,EAAYuB,OARVlC,WAgBnB,qBAAKlC,GAAG,mBAAR,SACE,oBAAID,UAAU,cAAd,uCAGF,uBAAMyB,SA/DW,SAAC+E,GACxBA,EAAE2C,iBACF,IAAIrL,EAAOsM,EACX1M,EAAS,QAASoB,EAAS8K,EAAO3J,GAAInC,GAAM+B,MAAK,SAAC7B,GAC9B,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBA0D1C,UACE,sBAAKY,UAAU,MAAMC,GAAG,mBAAxB,UACE,sBAAKD,UAAU,sBAAf,UACE,6DACA,uBACEZ,KAAK,OACLwC,KAAK,wBACL5B,UAAU,eACV+C,MAAOD,EAAYsH,EAAYU,uBAAuB,GACtDvE,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,IACnC7E,UAAQ,OAGZ,sBAAK3B,UAAU,sBAAf,UACE,8CAEA,uBACEZ,KAAK,OACLwC,KAAK,UACL5B,UAAU,eACV+C,MAAOqH,EAAYQ,QACnBrE,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,SAGvC,sBAAKxG,UAAU,sBAAf,UACE,qDAEA,uBACEZ,KAAK,OACLwC,KAAK,iBACL5B,UAAU,eACV+C,MAAOqH,EAAYW,eACnBxE,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,SAGvC,sBAAKxG,UAAU,sBAAf,UACE,kDAEA,uBACEZ,KAAK,OACLwC,KAAK,cACL5B,UAAU,eACV+C,MAAOqH,EAAYY,YACnBzE,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,SAGvC,sBAAKxG,UAAU,sBAAf,UACE,qDAEA,uBACEZ,KAAK,OACLwC,KAAK,gBACL5B,UAAU,eACV+C,MAAOqH,EAAYa,cACnB1E,SAAU,SAACC,GAAD,OAAOqC,EAAkBrC,YAIzC,8BACE,wBACEpH,KAAK,SACLY,UAAU,uBACVC,GAAG,mBAHL,yBASJ,cAAC,EAAD,CAAcnC,KAAMA,EAAMsM,YAAaA,UCsQlCc,EAlaI,WACjB,IAAMpL,EAAWC,cACXoL,EAAoB7K,aAAa8K,QAAQ,gBAC/C,EAA8BtK,mBACP,iBAArBqK,GADF,mBAAOlK,EAAP,KAAgBC,EAAhB,KAGA,EAA8CJ,mBAAS,IAAvD,mBAAOkH,EAAP,KAAwBC,EAAxB,KACA,EAAsCnH,mBAAS,IAA/C,mBAAOoH,EAAP,KAAoBC,EAApB,KACA,EAA4CrH,mBAAS,IAArD,mBAAOuK,EAAP,KAAuBC,EAAvB,KACA,EAAoCxK,mBAAS,IAA7C,mBAAOyK,EAAP,KAAmBC,EAAnB,KACA,EAAgC1K,mBAAS,IAAzC,mBAAOmF,EAAP,KAAiBC,EAAjB,KACM6B,EAAoBX,aACxB,SAACC,GAAD,OAAWA,EAAMC,kBAAkBhI,kBAE/B6H,EAAgBC,aACpB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB/H,cAG/B4K,EAAmB/C,aACvB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB9H,iBAGrCI,qBAAU,WACR6L,IACAD,EAAc,IACW,iBAArBL,GACFjK,GAAW,KAEZ,CAACiK,IAEJ,IAAMM,EAAkB,WACG,iBAArBN,GACFzN,EAAS,MAAOiB,GAAMkB,MAAK,SAAC7B,GACR,KAAdA,EAAIU,SACNwC,GAAW,GACXsK,EAAcxN,EAAIF,MAClBoI,EAAYlI,EAAIF,WAMxB4N,mBAAQ,WACNzD,EAAmBF,GACnBI,EAAehB,KACd,CAACY,EAAmBZ,IACvBuE,mBAAQ,WACNvD,EAAehB,KACd,CAACA,IACJuE,mBAAQ,WACNJ,EAAkBnB,KACjB,CAACA,IAEJ,IAAMtB,EAAoB,SAAC9F,EAAO4I,GAEhC,GADAzK,GAAW,GACE,IAAT6B,GAA+B,aAAhB4I,EAA6B,CAC9C,IAAI7N,EAAO,CAAE+E,OAAQuG,SAASrG,IAC9BrF,EAAS,OnBpCY,amBoCSI,GAAM+B,MAAK,SAAC7B,GACtB,KAAdA,EAAIU,SACNwC,GAAW,GACXsK,EAAcxN,EAAIF,eAGjB,GAAa,IAATiF,GAA+B,oBAAhB4I,EAAoC,CAC5D,IAAI7N,EAAO,CAAEsE,WAAYgH,SAASrG,IAClCrF,EAAS,OnB3CgB,iBmB2CSI,GAAM+B,MAAK,SAAC7B,GAC1B,KAAdA,EAAIU,SACN8M,EAAcxN,EAAIF,MAClBoD,GAAW,YAGV,GAAa,IAAT6B,GAA+B,uBAAhB4I,EAAuC,CAC/D,IAAI7N,EAAO,CAAEwG,qBAAsB8E,SAASrG,IAC5CrF,EAAS,OnBlDwB,wBmBkDSI,GAAM+B,MAAK,SAAC7B,GAClC,KAAdA,EAAIU,SACN8M,EAAcxN,EAAIF,MAClBoD,GAAW,YAIfsK,EAAc,KAyBlB,OACE,mCACE,gCAEwB,aAArBL,IACGlK,EAgEA,cAAC,EAAD,IA/DA,qCACE,sBAAKjB,UAAU,SAAf,UACE,uBAAO0B,QAAQ,cAAf,2BACA,yBACEE,KAAK,cACL3B,GAAG,cACHD,UAAU,eAEVuG,SAAU,SAACC,GAAD,OACRqC,EAAkBrC,EAAEC,OAAO1D,MAAO,cAEpCpB,UAAQ,EARV,UAUE,wBAAQoB,MAAM,GAAd,yCACCmF,EAAYhG,KAAI,WAAmBC,GAAnB,IAAGP,EAAH,EAAGA,KAAMiB,EAAT,EAASA,OAAT,OACf,wBAAQE,MAAOF,EAAf,SACGjB,GADyBO,YAMZ,GAArBoJ,EAAWvJ,OACV,wBAAOhC,UAAU,qCAAjB,UACE,gCACE,+BACE,oBAAIiC,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,wCAGJ,gCACGsJ,EAAWrJ,KACV,WASEC,GATF,IAEIsC,EAFJ,EAEIA,SACAD,EAHJ,EAGIA,aACAR,EAJJ,EAIIA,SACAE,EALJ,EAKIA,WACAQ,EANJ,EAMIA,uBACAL,EAPJ,EAOIA,oBAPJ,OAWE,+BACE,oBAAIpC,MAAM,MAAV,SAAiBwC,IACjB,6BAAKD,IACL,6BAAKR,IACL,6BAAKlB,EAAYoB,KACjB,6BAAKQ,IACL,6BAAK5B,EAAYuB,OANVlC,WAajB,mDAQc,oBAArBgJ,IACGlK,EAgEA,cAAC,EAAD,IA/DA,qCACE,sBAAKjB,UAAU,SAAf,UACE,uBAAO0B,QAAQ,cAAf,4BACA,yBACEE,KAAK,cACL3B,GAAG,cACHD,UAAU,eAEVuG,SAAU,SAACC,GAAD,OACRqC,EAAkBrC,EAAEC,OAAO1D,MAAO,qBAEpCpB,UAAQ,EARV,UAUE,wBAAQoB,MAAM,GAAd,yCACCiF,EAAgB9F,KAAI,WAAuBC,GAAvB,IAAGP,EAAH,EAAGA,KAAMQ,EAAT,EAASA,WAAT,OACnB,wBAAQW,MAAOX,EAAf,SACGR,GAD6BO,YAMhB,GAArBoJ,EAAWvJ,OACV,wBAAOhC,UAAU,qCAAjB,UACE,gCACE,+BACE,oBAAIiC,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,wCAGJ,gCACGsJ,EAAWrJ,KACV,WASEC,GATF,IAEIsC,EAFJ,EAEIA,SACAD,EAHJ,EAGIA,aACAR,EAJJ,EAIIA,SACAE,EALJ,EAKIA,WACAQ,EANJ,EAMIA,uBACAL,EAPJ,EAOIA,oBAPJ,OAWE,+BACE,oBAAIpC,MAAM,MAAV,SAAiBuC,IACjB,6BAAKC,IACL,6BAAKT,IACL,6BAAKlB,EAAYoB,KACjB,6BAAKQ,IACL,6BAAK5B,EAAYuB,OANVlC,WAajB,mDAOc,uBAArBgJ,IACGlK,EAgEA,cAAC,EAAD,IA/DA,qCACE,sBAAKjB,UAAU,SAAf,UACE,uBAAO0B,QAAQ,cAAf,kCACA,yBACEE,KAAK,cACL3B,GAAG,cACHD,UAAU,eAEVuG,SAAU,SAACC,GAAD,OACRqC,EAAkBrC,EAAEC,OAAO1D,MAAO,wBAEpCpB,UAAQ,EARV,UAUE,wBAAQoB,MAAM,GAAd,yCACCsI,EAAenJ,KAAI,WAAiCC,GAAjC,IAAGP,EAAH,EAAGA,KAAM0C,EAAT,EAASA,qBAAT,OAClB,wBAAQvB,MAAOuB,EAAf,SACG1C,GADuCO,YAM1B,GAArBoJ,EAAWvJ,OACV,wBAAOhC,UAAU,qCAAjB,UACE,gCACE,+BACE,oBAAIiC,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,wCAGJ,gCACGsJ,EAAWrJ,KACV,WASEC,GATF,IAEIsC,EAFJ,EAEIA,SACAD,EAHJ,EAGIA,aACAR,EAJJ,EAIIA,SACAE,EALJ,EAKIA,WACAQ,EANJ,EAMIA,uBACAL,EAPJ,EAOIA,oBAPJ,OAWE,+BACE,oBAAIpC,MAAM,MAAV,SAAiByC,IACjB,6BAAKD,IACL,6BAAKT,IACL,6BAAKlB,EAAYoB,KACjB,6BAAKM,IACL,6BAAK1B,EAAYuB,OANVlC,WAajB,mDAOR,qBAAKnC,UAAU,aAAf,SACwB,iBAArBmL,IACGlK,EA8FA,cAAC,EAAD,IA7FA,qCACE,qBAAKf,MAAO,CAAE0F,OAAQ,UAAtB,SACE,uBACExG,KAAK,OACLwD,YAAY,kBACZ2D,SAAU,SAACC,GAAD,OAtOR,SAACA,GACnB,IAAIE,EAAc,GAClBT,EAASU,QAAO,SAAC5D,IAEbA,EAAMgB,KAAK6C,cAAcC,SAASL,EAAEC,OAAO1D,MAAM6D,gBACjD7D,EAAM6H,QAAQhE,cAAcC,SAASL,EAAEC,OAAO1D,MAAM6D,iBAEpDF,EAAYlG,KAAKuC,MAGrByI,EAAc9E,GA4NmBP,CAAYK,QAGX,GAArB+E,EAAWvJ,OACV,wBAAOhC,UAAU,wCAAjB,UACE,gCACE,+BAEE,oBAAIiC,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,mCACA,oBAAIA,MAAM,MAAV,gCACA,oBAAIA,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,sBACA,oBAAIA,MAAM,MAAV,6BACA,oBAAIA,MAAM,MAAV,kCAGJ,gCACGsJ,EAAWrJ,KACV,WAoBEC,GApBF,IAEI2B,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,KACAC,EAJJ,EAIIA,SACAC,EALJ,EAKIA,sBACAC,EANJ,EAMIA,WACAC,EAPJ,EAOIA,UAGAE,GAVJ,EAQID,MARJ,EASIE,qBATJ,EAUID,qBACAE,EAXJ,EAWIA,iBACAC,EAZJ,EAYIA,aACAC,EAbJ,EAaIA,SACAC,EAdJ,EAcIA,uBACAoG,EAfJ,EAeIA,sBACAF,EAhBJ,EAgBIA,QACAG,EAjBJ,EAiBIA,eACAE,EAlBJ,EAkBIA,cAlBJ,OAsBE,qBAAcjL,UAAU,OAAxB,UACE,oBAAIiC,MAAM,MAAV,SAAiBuC,IACjB,6BAAKC,IACL,6BAAKV,IACL,6BAAKC,IACL,6BAAKC,IACL,+BAAKnB,EAAYoB,GAAjB,OACA,6BAAKpB,EAAYqB,KACjB,6BAAKO,IACL,6BAAK5B,EAAYuB,KACjB,6BAAKvB,EAAYyB,KACjB,6BAAKzB,EAAYgI,KACjB,6BAAKF,IACL,6BAAKG,IACL,6BAAKE,IAEL,qBAAIjL,UAAU,iBAAd,UACE,cAAC,IAAD,CAAMI,GAAE,8BAAyB0D,GAAjC,SACE,wBAAQ9D,UAAU,UAAlB,oBAGF,wBACEA,UAAU,UACVK,QAAS,WArTrC3C,EAAS,SnBjGmC,oBmBuZOoG,GAtTOjE,MAAK,SAAC7B,GAC5C,KAAdA,EAAIU,SACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CqM,SAgTsB,yBArBKtJ,WAoCjB,qDC9IHyJ,EA3Qa,WAC1B,IAAM9L,EAAWC,cAEX6J,EAASC,cACf,EAAwB/I,mBAAS,IAAjC,mBAAOhD,EAAP,KAAa6F,EAAb,KACA,EAA8C7C,mBAAS,IAAvD,mBAAOkH,EAAP,KAAwBC,EAAxB,KACA,EAAsCnH,mBAAS,IAA/C,mBAAOoH,EAAP,KAAoBC,EAApB,KACA,EAA4CrH,mBAAS,IAArD,mBAAOuK,EAAP,KAAuBC,EAAvB,KACMvD,EAAoBX,aACxB,SAACC,GAAD,OAAWA,EAAMC,kBAAkBhI,kBAE/B6H,EAAgBC,aACpB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB/H,cAE/B4K,EAAmB/C,aACvB,SAACC,GAAD,OAAWA,EAAMC,kBAAkB9H,iBAqBrC,SAASqM,EAAaC,GACpB,IAAM/I,EAAQ+I,EAAIrF,OAAO1D,MACzBY,EAAQ,2BAAK7F,GAAN,kBAAagO,EAAIrF,OAAO7E,KAAOmB,KArBxC2I,mBAAQ,WACNzD,EAAmBF,GACnBI,EAAehB,KACd,CAACY,EAAmBZ,IACvBuE,mBAAQ,WACNvD,EAAehB,KACd,CAACA,IACJuE,mBAAQ,WACNJ,EAAkBnB,KACjB,CAACA,IAEJvK,qBAAU,WACRlC,EAAS,MpBtCgC,oBoBsCOkM,EAAO3J,IAAIJ,MAAK,SAAC7B,GAC7C,KAAdA,EAAIU,QACNiF,EAAQ3F,EAAIF,KAAK,SAGpB,IAmBH,OACE,mCACkB,GAAfA,EAAKkE,QACJ,uBAAMP,SAfa,SAAC+E,GACxBA,EAAE2C,iBAEFzL,EAAS,MpBpDiC,oBoBoDOkM,EAAO3J,GAAInC,GAAM+B,MAChE,SAAC7B,GACmB,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBAS9C,UACE,sBAAKY,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAO0B,QAAQ,cAAf,2BACA,wBACEE,KAAK,SACL3B,GAAG,cACHD,UAAU,eACVuG,SAAU,SAACC,GAAD,OAAOqF,EAAarF,IAJhC,SAMG0B,EAAYhG,KAAI,WAAmBC,GAAnB,IAAGP,EAAH,EAAGA,KAAMiB,EAAT,EAASA,OAAT,OACf,wBACEE,MAAOF,EAEPkJ,SAAUjO,EAAK+E,QAAUA,EAH3B,SAKGjB,GAHIO,WAQb,sBAAKnC,UAAU,MAAf,UACE,uBAAO0B,QAAQ,YAAf,wBACA,uBACEtC,KAAK,SACLwC,KAAK,WACL5B,UAAU,eACV4C,YAAY,yBACZG,MAAOjF,EAAKkG,SACZuC,SAAU,SAACC,GAAD,OAAOqF,EAAarF,IAC9B7E,UAAQ,OAGZ,sBAAK3B,UAAU,MAAf,UACE,uBAAOsG,IAAI,aAAX,mBACA,uBACElH,KAAK,OACL2D,MAAOjF,EAAKiG,KACZnC,KAAK,OACL5B,UAAU,eACVuG,SAAU,SAACC,GAAD,OAAOqF,EAAarF,SAGlC,sBAAKxG,UAAU,MAAf,UACE,gDAEA,uBACEZ,KAAK,OACLwC,KAAK,wBACL5B,UAAU,eACV+C,MAAOjF,EAAK0K,sBACZjC,SAAU,SAACC,GAAD,OAAOqF,EAAarF,SAGlC,sBAAKxG,UAAU,MAAf,UACE,mDAEA,uBACEZ,KAAK,OACLwC,KAAK,aACL5B,UAAU,eACV+C,MAAOD,EAAYhF,EAAKoG,YAAY,GACpCqC,SAAU,SAACC,GAAD,OAAOqF,EAAarF,SAGlC,sBAAKxG,UAAU,MAAf,UACE,gDAEA,uBACEZ,KAAK,OACLwC,KAAK,YACL5B,UAAU,eACV+C,MAAOD,EAAYhF,EAAKqG,WAAW,GACnCoC,SAAU,SAACC,GAAD,OAAOqF,EAAarF,YAKpC,sBAAKxG,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAO0B,QAAQ,cAAf,4BACA,wBACEE,KAAK,aACL3B,GAAG,cACHD,UAAU,eACVuG,SAAU,SAACC,GAAD,OAAOqF,EAAarF,IAJhC,SAM6B,GAA1BwB,EAAgBhG,QACfgG,EAAgB9F,KAAI,WAAuBC,GAAvB,IAAGP,EAAH,EAAGA,KAAMQ,EAAT,EAASA,WAAT,OAClB,wBACEW,MAAOX,EAEP2J,SAAUjO,EAAKsE,YAAcA,EAH/B,SAKGR,GAHIO,WAQf,sBAAKnC,UAAU,MAAf,UACE,uBAAO0B,QAAQ,cAAf,uCACA,wBACEE,KAAK,uBACL3B,GAAG,cACHD,UAAU,eACVuG,SAAU,SAACC,GAAD,OAAOqF,EAAarF,IAJhC,SAM4B,GAAzB6E,EAAerJ,QACdqJ,EAAenJ,KAAI,WAAiCC,GAAjC,IAAGP,EAAH,EAAGA,KAAM0C,EAAT,EAASA,qBAAT,OACjB,wBACEvB,MAAOuB,EAEPyH,SACEjO,EAAKwG,sBAAwBA,EAJjC,SAOG1C,GALIO,WAUf,sBAAKnC,UAAU,MAAf,UACE,2DAEA,uBACEZ,KAAK,OACLwC,KAAK,sBACL5B,UAAU,eACV+C,MAAOD,EAAYhF,EAAKuG,qBAAqB,GAC7CkC,SAAU,SAACC,GAAD,OAAOqF,EAAarF,IAC9B7E,UAAQ,OAGZ,sBAAK3B,UAAU,MAAf,UACE,wDAEA,uBACEZ,KAAK,OACLwC,KAAK,mBACL5B,UAAU,eACV+C,MAAOD,EAAYhF,EAAKyG,kBAAkB,GAC1CgC,SAAU,SAACC,GAAD,OAAOqF,EAAarF,YAIpC,sBAAKxG,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,6DACA,uBACEZ,KAAK,OACLwC,KAAK,wBACL5B,UAAU,eACV+C,MAAOD,EAAYhF,EAAKgN,uBAAuB,GAC/CvE,SAAU,SAACC,GAAD,OAAOqF,EAAarF,SAGlC,sBAAKxG,UAAU,MAAf,UACE,8CAEA,uBACEZ,KAAK,OACLwC,KAAK,UACL5B,UAAU,eACV+C,MAAOjF,EAAK8M,QACZrE,SAAU,SAACC,GAAD,OAAOqF,EAAarF,SAGlC,sBAAKxG,UAAU,MAAf,UACE,qDAEA,uBACEZ,KAAK,OACLwC,KAAK,iBACL5B,UAAU,eACV+C,MAAOjF,EAAKiN,eACZxE,SAAU,SAACC,GAAD,OAAOqF,EAAarF,SAIlC,sBAAKxG,UAAU,MAAf,UACE,kDAEA,uBACEZ,KAAK,OACLwC,KAAK,cACL5B,UAAU,eACV+C,MAAOD,EAAYhF,EAAKkN,aAAa,GACrCzE,SAAU,SAACC,GAAD,OAAOqF,EAAarF,SAGlC,sBAAKxG,UAAU,MAAf,UACE,qDAEA,uBACEZ,KAAK,OACLwC,KAAK,gBACL5B,UAAU,eACV+C,MAAOjF,EAAKmN,cACZ1E,SAAU,SAACC,GAAD,OAAOqF,EAAarF,YAIpC,8BACE,wBAAQpH,KAAK,SAAb,4BC3JG4M,GA5GA,WACb,IAAMlM,EAAWC,cACXL,EAAUC,cAChB,EAAgCmB,mBAAS,IAAzC,mBAAOmL,EAAP,KAAiBC,EAAjB,KACA,EAII/K,cAHFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACa5C,EAHf,EAGE8C,UAAa9C,OAcT0N,EAAO/K,EAAS,WAAY,CAAEO,UAAU,IAE9C,OACE,qCACE,oBAAI3B,UAAU,QAAd,qBACA,sBAAMyB,SAAUJ,GAhBK,SAACvD,GACxBJ,EAAS,OrBuBS,SqBvBOI,GAAM+B,MAAK,SAAC7B,GACjB,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CM,EAAQc,KAAK,WACU,KAAdxC,EAAIU,QACboB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBAU9C,SACE,sBAAKY,UAAU,kBAAf,UACE,gCACE,uBAAO0B,QAAQ,OAAf,oBACA,mCAAOzB,GAAG,QAAWmB,EAAS,OAAQ,CAAEO,UAAU,MAClD,qBAAK3B,UAAU,aAAf,SACGvB,EAAOmD,MAAQ,+DAIpB,gCACE,uBAAOF,QAAQ,QAAf,sBACA,mCACEtC,KAAK,OACLa,GAAG,SACCmB,EAAS,QAAS,CACpBO,UAAU,EACVyK,QACE,sEAIL3N,EAAO4N,OACN,qBAAKrM,UAAU,aAAf,SACE,qCACwB,YAArBvB,EAAO4N,MAAMjN,MACZ,0DAEoB,WAArBX,EAAO4N,MAAMjN,MACZ,uEAOV,sBAAKY,UAAU,OAAf,UACE,uBAAO0B,QAAQ,WAAf,yBACA,+CACEtC,KAAK,YACD+M,GAFN,IAGE5F,SAAU,SAACC,GAAD,OAAO0F,EAAY1F,EAAEC,OAAO1D,WAGxC,qBAAK/C,UAAU,aAAf,SACGvB,EAAOwN,UAAY,+DAGxB,gCACE,uBAAOvK,QAAQ,cAAf,iCACA,mCACEtC,KAAK,WACLa,GAAG,eACCmB,EAAS,kBAAmB,CAC9BO,UAAU,EACV2K,SAAU,SAACvJ,GAAD,OAAWkJ,GAAYlJ,OAGpCtE,EAAO8N,iBACN,qBAAKvM,UAAU,aAAf,SACE,qCACkC,YAA/BvB,EAAO8N,gBAAgBnN,MACtB,0DAE8B,YAA/BX,EAAO8N,gBAAgBnN,MACtB,sFAOV,8BACE,wBAAQA,KAAK,SAASY,UAAU,kBAAhC,+BCrGGwM,GAJM,WACnB,OAAO,qDCqFMC,GAhFD,WACZ,IAAM3M,EAAWC,cACXL,EAAUC,cAChB,EAIIwB,cAHFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACa5C,EAHf,EAGE8C,UAAa9C,OAef,OACE,mCACE,gCACE,oBAAIuB,UAAU,QAAd,qBACA,sBAAMyB,SAAUJ,GAhBG,SAACvD,GACxBJ,EAAS,OvB4BQ,QuB5BOI,GAAM+B,MAAK,SAAC7B,GAChB,KAAdA,EAAIU,QACNoB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,aAC5CkB,aAAaC,QAAQ,QAASvC,EAAIF,KAAK4O,OACvChN,EAAQc,KAAK,MACU,KAAdxC,EAAIU,QACboB,EAASX,EAAQ,CAAEA,QAASnB,EAAIF,KAAMsB,KAAM,iBAS5C,SACE,sBAAKY,UAAU,kBAAf,UACE,gCACE,uBAAO0B,QAAQ,QAAf,sBACA,mCACEtC,KAAK,OACLa,GAAG,SACCmB,EAAS,QAAS,CACpBO,UAAU,EACVyK,QACE,sEAIL3N,EAAO4N,OACN,qBAAKrM,UAAU,aAAf,SACE,qCACwB,YAArBvB,EAAO4N,MAAMjN,MACZ,0DAEoB,WAArBX,EAAO4N,MAAMjN,MACZ,uEAOV,sBAAKY,UAAU,OAAf,UACE,uBAAO0B,QAAQ,WAAf,yBACA,mCACEtC,KAAK,WACLa,GAAG,YACCmB,EAAS,WAAY,CACvBO,UAAU,MAId,qBAAK3B,UAAU,aAAf,SACGvB,EAAOwN,UAAY,+DAIxB,8BACE,wBAAQ7M,KAAK,SAASY,UAAU,kBAAhC,iC,qBClDC2M,OAvBf,SAAwBC,GACtB,IAAMF,EAAQpM,aAAa8K,QAAQ,SAEnC,GAAa,MAATsB,EAAe,CACjB,IAAMG,EAASC,KAAIC,OAAOL,EAAO,aAEjC,OAAoB,MAAhBG,EAAOR,OAA+B,MAAdQ,EAAOG,IAE/B,8BACE,cAAC,IAAD,CAAOC,KAAML,EAAMK,KAAMC,UAAWN,EAAMM,eAI9C5M,aAAaI,WAAW,SACxBJ,aAAaI,WAAW,gBACjB,cAAC,IAAD,CAAUN,GAAI,YAKvB,OAFAE,aAAaI,WAAW,SACxBJ,aAAaI,WAAW,gBACjB,cAAC,IAAD,CAAUN,GAAI,YCiDV+M,GAnDA,WACb,IAAMC,EAAgBhG,aAAY,SAACC,GAAD,OAAWA,EAAMC,kBAAkBnI,WAcrE,OAZAS,qBAAU,gBACaqD,GAAjBmK,GAA+C,IAAjBA,IACN,WAAtBA,EAAchO,KAChBiO,IAAMC,QAAQF,EAAcjO,QAAQA,SACL,WAAtBiO,EAAchO,KACvBiO,IAAME,QAAQH,EAAcjO,QAAQA,SACL,SAAtBiO,EAAchO,MACvBiO,IAAMG,MAAMJ,EAAcjO,QAAQA,YAGrC,CAACiO,IAGF,mCACE,eAAC,IAAD,WACE,cAAC,EAAD,IAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOH,KAAK,UAAUC,UAAWlB,KACjC,cAAC,IAAD,CAAOiB,KAAK,SAASC,UAAWT,KAChC,cAAC,GAAD,CAAgBgB,OAAK,EAACR,KAAK,IAAIC,UAAWxJ,IAC1C,cAAC,GAAD,CAAgBuJ,KAAK,cAAcC,UAAW1K,IAC9C,cAAC,GAAD,CAAgByK,KAAK,kBAAkBC,UAAWrM,IAClD,cAAC,GAAD,CAAgBoM,KAAK,oBAAoBC,UAAWlD,IACpD,cAAC,GAAD,CAAgBiD,KAAK,gBAAgBC,UAAWpF,IAChD,cAAC,GAAD,CAAgBmF,KAAK,oBAAoBC,UAAWhD,IACpD,cAAC,GAAD,CAAgB+C,KAAK,oBAAoBC,UAAWrC,IACpD,cAAC,GAAD,CAAgBoC,KAAK,gBAAgBC,UAAWzD,IAChD,cAAC,GAAD,CAAgBwD,KAAK,UAAUC,UAAWhC,IAC1C,cAAC,GAAD,CACE+B,KAAK,2BACLC,UAAWtB,IAEb,cAAC,GAAD,CACEqB,KAAK,4BACLC,UAAWpH,IAEb,cAAC,GAAD,CACEmH,KAAK,8BACLC,UAAWnD,IAEb,cAAC,IAAD,CAAOmD,UAAWV,c,SC3DtBkB,GAAgB,CACpBvO,QAAS,GACTG,eAAgB,GAChBC,WAAY,GACZC,cAAe,IAgCFmO,GA7BC,WAAoC,IAAnCtG,EAAkC,uDAA1BqG,GAAeE,EAAW,uCACjD,OAAQA,EAAOxO,MACb,KAAKF,EACH,OAAO,2BACFmI,GADL,IAEElI,QAASyO,EAAOvO,UAGpB,KAAKJ,EACH,OAAO,2BACFoI,GADL,IAEE/H,eAAgBsO,EAAOvO,UAE3B,KAAKN,EACH,OAAO,2BACFsI,GADL,IAEE9H,WAAYqO,EAAOvO,UAEvB,KAAKL,EACH,OAAO,2BACFqI,GADL,IAEE7H,cAAeoO,EAAOvO,UAG1B,QACE,OAAOgI,IChCEwG,GAJKC,2BAAgB,CAClCxG,kBAAmBqG,K,UCCNI,GADDC,uBAAYH,GAAaI,kCCexBC,OAXf,WACE,OACE,cAAC,IAAD,CAAUH,MAAOA,GAAjB,SACE,sBAAK/N,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,IAAD,CAAgBmO,kBAAkB,EAAOC,UAAW,YCD7CC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1O,MAAK,YAAkD,IAA/C2O,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.320cb914.chunk.js","sourcesContent":["export const FetchAPI = async (method, url, data = null) => {\n  const header = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  let res = [];\n  if (method == \"get\" || method == \"delete\") {\n    res = await fetch(process.env.REACT_APP_API_KEY + url, {\n      method: method,\n      headers: header,\n    });\n  } else {\n    res = await fetch(process.env.REACT_APP_API_KEY + url, {\n      method: method,\n      crossDomain: true,\n      headers: header,\n      body: JSON.stringify(data),\n    });\n  }\n  const json = await res.json();\n  if (json.errors) {\n    /* console.error(json.errors);\n    throw new Error(\"Failed to fetch API\"); */\n    return json;\n  }\n\n  return { data: json, status: res.status };\n};\n","export const HOME = \"alldata\";\nexport const SPECIFIC_REPLACEMENT_DATA = \"alldata/\"; // ':id'\nexport const DELETE_SPECIFIC_REPLACEMENT_DATA = \"replacemeninward/\"; // ':id'\nexport const GET_SPECIFIC_REPLACEMENT_DATA = \"replacemeninward/\"; // ':id'\nexport const EDIT_SPECIFIC_REPLACEMENT_DATA = \"replacemeninward/\"; // ':id'\n\n// stage\n\nexport const STAGE1 = \"replacemeninward\";\nexport const STAGE2 = \"replacemeninward/\"; // ':id'\n\n// ITEM\n\nexport const GET_ALL_ITEM = \"item\";\nexport const ADD_ONE_ITEM = \"item\";\nexport const GET_SPECIFIC_ITEM = \"item/\"; // ':id'\nexport const EDIT_SPECIFIC_ITEM = \"item/\"; // ':id'\nexport const DELETE_SPECIFIC_ITEM = \"item/\"; // ':id'\n\n// REPLACEMENT_PARTNER\n\nexport const CREATE_REPLACEMENT_PARTNER = \"replacementPartner\";\nexport const GET_ALL_REPLACEMENT_PARTNER = \"replacementPartner\";\nexport const GET_SPECIFIC_PARTNER = \"replacementPartner/\"; // ':id'\nexport const EDIT_SPECIFIC_PARTNER = \"replacementPartner/\"; // ':id'\nexport const DELETE_SPECIFIC_PARTNER = \"replacementPartner/\"; // ':id'\n\n// CUSTOMER\n\nexport const GET_ALL_CUSTOMER = \"customer\";\nexport const ADD_ONE_CUSTOMER = \"customer\";\nexport const GET_SPECIFIC_CUSTOMER = \"customer/\"; // ':id'\nexport const EDIT_SPECIFIC_CUSTOMER = \"customer/\"; // ':id'\nexport const DELETE_SPECIFIC_CUSTOMER = \"customer/\"; // ':id'\n\n// FILTERS\nexport const ITEM_FILTER = \"itemfilter\";\nexport const CUSTOMER_FILTER = \"customerfilter\";\nexport const PURCHASE_PARTNER_FILTER = \"purchasepartnerfilter\";\n\n// SIGNUP\n\nexport const SIGNUP = \"signup\";\n\n// LOGIN\n\nexport const LOGIN = \"login\";\n","export const MESSAGE = \"MESSAGE\";\nexport const GET_ALL_CUSTOMER = \"GET_ALL_CUSTOMER\";\nexport const GET_ALL_ITEM = \"GET_ALL_ITEM\";\nexport const GET_ALL_REPLACEMENT_PARTNER = \"GET_ALL_REPLACEMENT_PARTNER\";\n","import {\n  MESSAGE,\n  GET_ALL_CUSTOMER,\n  GET_ALL_ITEM,\n  GET_ALL_REPLACEMENT_PARTNER,\n} from \"./action\";\n\nexport const message = (data) => {\n  return {\n    type: MESSAGE,\n    payload: data,\n  };\n};\n\nexport const getAllCustomer = (data) => {\n  return {\n    type: GET_ALL_CUSTOMER,\n    payload: data,\n  };\n};\nexport const getAllItem = (data) => {\n  return {\n    type: GET_ALL_ITEM,\n    payload: data,\n  };\n};\nexport const getAllPartner = (data) => {\n  return {\n    type: GET_ALL_REPLACEMENT_PARTNER,\n    payload: data,\n  };\n};\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FetchAPI } from \"../api\";\nimport {\n  GET_ALL_CUSTOMER,\n  GET_ALL_ITEM,\n  GET_ALL_REPLACEMENT_PARTNER,\n} from \"../api/apiList\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  getAllCustomer,\n  getAllItem,\n  getAllPartner,\n} from \"../redux/actionFunction\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Header = () => {\n  const history = useHistory();\n  useEffect(async () => {\n    await FetchAPI(\"get\", GET_ALL_CUSTOMER).then((res) =>\n      dispatch(getAllCustomer(res.data))\n    );\n    await FetchAPI(\"get\", GET_ALL_ITEM).then((res) =>\n      dispatch(getAllItem(res.data))\n    );\n    await FetchAPI(\"get\", GET_ALL_REPLACEMENT_PARTNER).then((res) =>\n      dispatch(getAllPartner(res.data))\n    );\n  }, []);\n  const dispatch = useDispatch();\n\n  const Logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"filterOption\");\n    history.push(\"/login\");\n  };\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light\">\n        <div\n          className=\"collapse navbar-collapse\"\n          id=\"navbarSupportedContent\"\n          style={{ marginLeft: \"35px\" }}\n        >\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link to=\"/\">\n                <p className=\"nav-link\">Home</p>\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/createitem\">\n                <p className=\"nav-link\">Create Item</p>\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/createcustomer\">\n                <p className=\"nav-link\">Create Customer</p>\n              </Link>\n            </li>\n\n            <li className=\"nav-item\">\n              <Link to=\"/createcustomer\">\n                <Link to=\"/createreplacementpartner\">\n                  <p className=\"nav-link\">Create Replacement Partner</p>\n                </Link>\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/inwardstage1\">\n                <p className=\"nav-link\">stage1</p>\n              </Link>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <p className=\"nav-link dropdown-toggle\">Dropdown</p>\n              <div className=\"dropdown-menu inner-menu\">\n                <p\n                  className=\"dropdown-item\"\n                  onClick={() => {\n                    localStorage.setItem(\"filterOption\", \"Purchase Party Wise\");\n                    history.push(\"/filter\");\n                  }}\n                >\n                  Purchase Party Wise\n                </p>\n                <p\n                  className=\"dropdown-item\"\n                  onClick={() => {\n                    localStorage.setItem(\"filterOption\", \"Sales Party Wise\");\n                    history.push(\"/filter\");\n                  }}\n                >\n                  Sales Party Wise\n                </p>\n                <p\n                  className=\"dropdown-item\"\n                  onClick={() => {\n                    localStorage.setItem(\"filterOption\", \"Total Records\");\n                    history.push(\"/filter\");\n                  }}\n                >\n                  Total Records\n                </p>\n\n                <p\n                  className=\"dropdown-item\"\n                  onClick={() => {\n                    localStorage.setItem(\"filterOption\", \"Item Wise\");\n                    history.push(\"/filter\");\n                  }}\n                >\n                  Item Wise\n                </p>\n              </div>\n            </li>\n          </ul>\n          <div\n            style={{ marginLeft: \"auto\", marginRight: \"35px\" }}\n            className=\"cursor_pointer\"\n          >\n            <p onClick={() => Logout()}>LogOut</p>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    // <div class=\"text-center \" style={{ margin: \"40vh\" }}>\n    //   <div class=\"spinner-grow text-dark\" role=\"status\">\n    //     <span class=\"sr-only\"></span>\n    //   </div>\n    // </div>\n\n    <div className=\"bbody\">\n      <div class=\"loader \">\n        <div class=\"face\">\n          <div class=\"circle\"></div>\n        </div>\n        <div class=\"face\">\n          <div class=\"circle\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FetchAPI } from \"../../api\";\nimport {\n  ADD_ONE_CUSTOMER,\n  GET_ALL_CUSTOMER,\n  DELETE_SPECIFIC_CUSTOMER,\n} from \"../../api/apiList\";\nimport { useDispatch } from \"react-redux\";\nimport { message } from \"../../redux/actionFunction\";\nimport { getAllCustomer } from \"../../redux/actionFunction\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../../components/loader\";\n\nconst CreateCustomer = () => {\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const handleSubmitData = (data) => {\n    FetchAPI(\"post\", ADD_ONE_CUSTOMER, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        reset();\n        getCustomerData();\n      } else if (res.status == 400) {\n        dispatch(message({ message: res.data, type: \"error\" }));\n      }\n    });\n  };\n\n  useEffect(() => {\n    getCustomerData();\n  }, []);\n  const getCustomerData = () => {\n    FetchAPI(\"get\", GET_ALL_CUSTOMER).then((res) => {\n      if (res.status == 200) {\n        setLoading(false);\n        setCustomers(res.data);\n        dispatch(getAllCustomer(res.data));\n      }\n    });\n  };\n\n  const deleteItem = (id) => {\n    if (window.confirm(\"Are you sure to delete this item?\")) {\n      FetchAPI(\"delete\", DELETE_SPECIFIC_CUSTOMER + id).then((res) => {\n        if (res.status == 200) {\n          dispatch(message({ message: res.data, type: \"success\" }));\n          getCustomerData();\n        }\n      });\n    }\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          <h3 className=\"mb-3 \">Create New Customer</h3>\n          <div className=\"create_customer\">\n            <form onSubmit={handleSubmit(handleSubmitData)}>\n              <div>\n                <label htmlFor=\"Customer Name\">Customer Name:</label>\n                <input\n                  id=\"Customer Name\"\n                  {...register(\"name\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.name && <span>This field is required</span>}\n                </div>\n              </div>\n\n              {/* <div>\n                <label htmlFor=\"addressLine1\">Address : </label>\n                <input\n                  type=\"text\"\n                  id=\"addressLine1\"\n                  {...register(\"addressLine1\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.addressLine1 && <span>This field is required</span>}\n                </div>\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"create_customer_without_label\"\n                    {...register(\"addressLine2\", { required: false })}\n                  />\n                </div>\n              </div>*/}\n              <div>\n                <label htmlFor=\"city\">city : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"city\"\n                  {...register(\"city\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.city && <span>This field is required</span>}\n                </div>\n              </div>\n              {/* <div>\n                <label htmlFor=\"Pincode\">Pincode : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"Pincode\"\n                  {...register(\"pincode\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.pincode && <span>This field is required</span>}\n                </div>\n              </div>  */}\n              <div>\n                <label htmlFor=\"Contact Number\">Contact Number : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"Contact Number\"\n                  {...register(\"contactNumber\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.contactNumber && <span>This field is required</span>}\n                </div>\n              </div>\n              <div style={{ marginLeft: \"20%\", marginTop: \"20px\" }}>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {customers.length != 0 && (\n            <table className=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Customer Id</th>\n                  <th scope=\"col\">Name</th>\n                  {/* <th scope=\"col\">AddressLine1</th>\n                  <th scope=\"col\">AddressLine2</th>\n                  <th scope=\"col\">Pincode</th> */}\n                  <th scope=\"col\">City</th>\n                  <th scope=\"col\">Contact Number</th>\n                  <th scope=\"col\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {customers.map(\n                  (\n                    {\n                      customerId,\n                      name,\n                      // addressLine1,\n                      // addressLine2,\n                      // pincode,\n                      city,\n                      contactNumber,\n                    },\n                    key\n                  ) => (\n                    <tr key={key}>\n                      <th scope=\"row\">{customerId}</th>\n                      <td>{name}</td>\n                      {/* <td>{addressLine1}</td>\n                      <td>{addressLine2}</td>\n                      <td>{pincode}</td> */}\n                      <td>{city}</td>\n                      <td>{contactNumber}</td>\n                      <td>\n                        <Link\n                          to={\"/editcustomer/\" + customerId}\n                          className=\"mx-2\"\n                        >\n                          <i className=\"fas fa-edit\"></i>\n                        </Link>\n                        ||\n                        <span\n                          onClick={() => deleteItem(customerId)}\n                          className=\"mx-2 cursor_pointer\"\n                        >\n                          <i\n                            className=\"far fa-trash-alt\"\n                            style={{ color: \"#0D6EFD\" }}\n                          ></i>\n                        </span>\n                      </td>\n                    </tr>\n                  )\n                )}\n              </tbody>\n            </table>\n          )}\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default CreateCustomer;\n","import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { FetchAPI } from \"../../api\";\nimport {\n  ADD_ONE_ITEM,\n  GET_ALL_ITEM,\n  DELETE_SPECIFIC_ITEM,\n} from \"../../api/apiList\";\nimport { message } from \"../../redux/actionFunction\";\nimport { getAllItem } from \"../../redux/actionFunction\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../../components/loader\";\n\nconst CreateItem = () => {\n  const [loading, setLoading] = useState(true);\n\n  const [items, setItems] = useState([]);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  useEffect(() => {\n    getItemData();\n  }, []);\n  const getItemData = () => {\n    FetchAPI(\"get\", GET_ALL_ITEM).then((res) => {\n      if (res.status == 200) {\n        setLoading(false);\n        setItems(res.data);\n        dispatch(getAllItem(res.data));\n      }\n    });\n  };\n\n  const deleteItem = (id) => {\n    if (window.confirm(\"Are you sure to delete this item?\")) {\n      FetchAPI(\"delete\", DELETE_SPECIFIC_ITEM + id).then((res) => {\n        if (res.status == 200) {\n          dispatch(message({ message: res.data, type: \"success\" }));\n          getItemData();\n        }\n      });\n    }\n  };\n\n  const handleSubmitData = (data) => {\n    FetchAPI(\"post\", ADD_ONE_ITEM, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        reset();\n        getItemData();\n      } else if (res.status == 400) {\n        dispatch(message({ message: res.data, type: \"error\" }));\n      }\n    });\n  };\n  return (\n    <>\n      {!loading ? (\n        <>\n          <h3 className=\"mb-3 \">Create New Item</h3>\n          <form onSubmit={handleSubmit(handleSubmitData)}>\n            <div className=\"form-group mb-2 \">\n              <label htmlFor=\"ItemName\" className=\"col-sm-1 \">\n                Item Name :\n              </label>\n              <input\n                type=\"text\"\n                id=\"ItemName\"\n                placeholder=\"Enter Item Name\"\n                {...register(\"name\", { required: true })}\n              />\n              <div className=\"error mt-2\">\n                {errors.name && <span>This field is required</span>}\n              </div>\n            </div>\n\n            <div>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </form>\n          {items.length != 0 && (\n            <table className=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Item Id</th>\n                  <th scope=\"col\">Name</th>\n                  <th scope=\"col\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {items.map(({ itemId, name }, key) => (\n                  <tr key={key}>\n                    <th scope=\"row\">{itemId}</th>\n                    <td>{name}</td>\n                    <td>\n                      <Link to={\"/edititem/\" + itemId} className=\"mx-2\">\n                        <i className=\"fas fa-edit\"></i>\n                      </Link>\n                      ||\n                      <span\n                        onClick={() => deleteItem(itemId)}\n                        className=\"mx-2 cursor_pointer\"\n                      >\n                        <i\n                          className=\"far fa-trash-alt\"\n                          style={{ color: \"#0D6EFD\" }}\n                        ></i>\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default CreateItem;\n","export const formateDate = (value, input = false) => {\n  if (value != undefined && value != null) {\n    var today = \"\";\n\n    var date = new Date(value);\n\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    var year = date.getFullYear();\n\n    if (month < 10) month = \"0\" + month;\n    if (day < 10) day = \"0\" + day;\n    if (input === false) {\n      today = day + \"-\" + month + \"-\" + year;\n      return today;\n    } else {\n      today = year + \"-\" + month + \"-\" + day;\n      return today;\n    }\n  }\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { FetchAPI } from \"../api\";\nimport { HOME } from \"../api/apiList\";\nimport { useHistory } from \"react-router-dom\";\nimport { formateDate } from \"../components/formateDate\";\nimport Loader from \"../components/loader\";\n\nconst TableHover = () => {\n  const history = useHistory();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  var today = new Date();\n  today.setDate(today.getDate() - 12);\n\n  useEffect(() => {\n    FetchAPI(\"get\", HOME).then((res) => {\n      setLoading(false);\n      setData(res.data);\n    });\n  }, []);\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          <div className=\"row\">\n            <div className=\"form-group col-md-12 my-2\">\n              <h3>Pending Replacement Date</h3>\n            </div>\n          </div>\n          <div className=\"show-image\">\n            {data.length != 0 ? (\n              <table className=\"table table-bordered \">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Id</th>\n                    <th scope=\"col\">Customer Name</th>\n                    <th scope=\"col\">Item Name</th>\n                    <th scope=\"col\">SrNo.</th>\n                    <th scope=\"col\">Quantity</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Inward Date</th>\n                    <th scope=\"col\">Sales Date</th>\n                    <th scope=\"col\">Replacement Parther Name</th>\n                    <th scope=\"col\">Replacement Sent Date</th>\n                    <th scope=\"col\">Purchase Bill Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map(\n                    (\n                      {\n                        replacementId,\n                        customerId,\n                        itemId,\n                        srno,\n                        quantity,\n                        additionalDescription,\n                        inwardDate,\n                        salesDate,\n                        stage,\n                        replacementPartherId,\n                        replacementSentDate,\n                        purchaseBillDate,\n                        customerName,\n                        itemName,\n                        replacementPartherName,\n                      },\n                      key\n                    ) => (\n                      <Fragment key={key}>\n                        {stage != 3 && (\n                          <tr\n                            className={`test ${\n                              today > new Date(inwardDate) ? `error` : \"\"\n                            }`}\n                          >\n                            <th scope=\"row\">{replacementId}</th>\n                            <td>{customerName}</td>\n                            <td>{itemName}</td>\n                            <td>{srno}</td>\n                            <td>{quantity}</td>\n                            <td>{additionalDescription}</td>\n                            <td>{formateDate(inwardDate)} </td>\n                            <td>{formateDate(salesDate)}</td>\n                            <td>{replacementPartherName}</td>\n                            <td>{formateDate(replacementSentDate)}</td>\n                            <td>{formateDate(purchaseBillDate)}</td>\n\n                            <td className=\"disable_button\">\n                              {replacementPartherName.length == 0 && (\n                                <button\n                                  className=\"spacing\"\n                                  onClick={() =>\n                                    history.push(\n                                      \"/inwardstage2/\" + replacementId\n                                    )\n                                  }\n                                >\n                                  Stage2\n                                </button>\n                              )}\n                              {replacementPartherName.length != 0 && (\n                                <button\n                                  className=\"spacing\"\n                                  onClick={() =>\n                                    history.push(\n                                      \"inwardstage3/\" + replacementId\n                                    )\n                                  }\n                                >\n                                  Stage3\n                                </button>\n                              )}\n                            </td>\n                          </tr>\n                        )}\n                      </Fragment>\n                    )\n                  )}\n                </tbody>\n              </table>\n            ) : (\n              <h3>No Data</h3>\n            )}\n          </div>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default TableHover;\n","import React from \"react\";\n\nconst ReplacementAddressPrint = ({ printData, setPrintData }) => {\n  setTimeout(() => {\n    window.print();\n    setPrintData({});\n  }, 500);\n  return (\n    <>\n      <div\n        id=\"printableArea\"\n        style={{ width: \"350px\", border: \"0 solid black\" }}\n      >\n        <div\n          style={{\n            textAlign: \"left\",\n            marginLeft: \"30px\",\n            marginTop: \"5px\",\n            fontFamily: \"Verdana\",\n            fontSize: 16,\n            fontWeight: 900,\n            wordWrap: \"break-word\",\n          }}\n        >\n          <div>\n            <span style={{ marginLeft: \"-10px\" }}>TO,</span>\n            <span\n              style={{\n                textAlign: \"right\",\n                marginLeft: \"150px\",\n                float: \"right\",\n              }}\n              // className=\"print_bold_font\"\n            >\n              MO.{printData.contactNumber}\n            </span>\n          </div>\n          <div\n          // className=\"print_bold_font\"\n          >\n            {printData.name}\n          </div>\n          <div style={{ wordWrap: \"break-word\" }}>\n            {printData.addressLine1},\n          </div>\n          {printData.addressLine2 != \"\" && (\n            <div style={{ wordWrap: \"break-word\" }}>\n              {printData.addressLine2},\n            </div>\n          )}\n          {printData.addressLine3 != \"\" && (\n            <div style={{ wordWrap: \"break-word\" }}>\n              {printData.addressLine3},\n            </div>\n          )}\n          <div>{printData.city}</div>\n          <div>{printData.pincode}.</div>\n        </div>\n\n        <div\n          style={{\n            width: \"350px\",\n            border: \"1px solid black\",\n            margin: \"10px 0\",\n          }}\n        ></div>\n\n        <div\n          style={{\n            textAlign: \"left\",\n            marginLeft: \"30px\",\n            marginBottom: \"5px\",\n            fontFamily: \"Calibri\",\n            fontSize: 13,\n          }}\n        >\n          <div>\n            <span style={{ marginLeft: \"-10px\" }}>From,</span>\n            {/* <span\n              style={{ textAlign: \"right\", marginLeft: \"150px\" }}\n              className=\"print_bold_font\"\n            >\n              MO.8866269311\n            </span> */}\n          </div>\n          <div>K-NOX INFOTECH</div>\n          <div>Randhanpuri Bazar,</div>\n          <div>Bhavnagar -364001.</div>\n          <div>MO.8866269311</div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ReplacementAddressPrint;\n","import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FetchAPI } from \"../../api\";\nimport {\n  CREATE_REPLACEMENT_PARTNER,\n  GET_ALL_REPLACEMENT_PARTNER,\n  DELETE_SPECIFIC_PARTNER,\n} from \"../../api/apiList\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { message } from \"../../redux/actionFunction\";\nimport { getAllPartner } from \"../../redux/actionFunction\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../../components/loader\";\nimport ReplacementAddressPrint from \"../../components/replacementAddressPrint\";\n\nconst CreateReplacementPartner = () => {\n  const [partners, setPartners] = useState([]);\n  const [mainData, setMainData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [printData, setPrintData] = useState({});\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  useEffect(() => {\n    getPartnerData();\n  }, []);\n  const getPartnerData = () => {\n    FetchAPI(\"get\", GET_ALL_REPLACEMENT_PARTNER).then((res) => {\n      if (res.status == 200) {\n        setLoading(false);\n        setPartners(res.data);\n        setMainData(res.data);\n        dispatch(getAllPartner(res.data));\n      }\n    });\n  };\n\n  const deleteItem = (id) => {\n    if (window.confirm(\"Are you sure to delete this item?\")) {\n      FetchAPI(\"delete\", DELETE_SPECIFIC_PARTNER + id).then((res) => {\n        if (res.status == 200) {\n          dispatch(message({ message: res.data, type: \"success\" }));\n          getPartnerData();\n        }\n      });\n    }\n  };\n\n  const handleSubmitData = (data) => {\n    FetchAPI(\"post\", CREATE_REPLACEMENT_PARTNER, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        reset();\n        getPartnerData();\n      } else if (res.status == 400) {\n        dispatch(message({ message: res.data, type: \"error\" }));\n      }\n    });\n  };\n\n  const searchData = (e) => {\n    setSearchValue(e.target.value);\n    let filterValue = [];\n    mainData.filter((value) => {\n      if (value.name.toLowerCase().includes(e.target.value.toLowerCase())) {\n        filterValue.push(value);\n      }\n    });\n    setPartners(filterValue);\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          <h3 className=\"mb-3 \" id=\"nonPrintableArea\">\n            Create Replacement Partner\n          </h3>\n          {searchValue == \"\" && (\n            <div className=\"create_customer\" id=\"nonPrintableArea\">\n              <form onSubmit={handleSubmit(handleSubmitData)}>\n                <div>\n                  <label className=\"col-sm-1\" htmlFor=\"Partner Name\">\n                    Name:\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"Partner Name\"\n                    placeholder=\"Enter Partner Name\"\n                    {...register(\"name\", { required: false })}\n                  />\n                  <div className=\"error mt-2\">\n                    {errors.name && <span>This field is required</span>}\n                  </div>\n                </div>\n\n                <div>\n                  <label htmlFor=\"addressLine1\">Address : </label>\n                  <input\n                    type=\"text\"\n                    id=\"addressLine1\"\n                    {...register(\"addressLine1\", { required: false })}\n                  />\n                  <div className=\"error mt-2\">\n                    {errors.addressLine1 && <span>This field is required</span>}\n                  </div>\n                  <div>\n                    <input\n                      type=\"text\"\n                      className=\"create_customer_without_label\"\n                      {...register(\"addressLine2\", { required: false })}\n                    />\n                  </div>\n                  <div>\n                    <input\n                      type=\"text\"\n                      className=\"create_customer_without_label\"\n                      {...register(\"addressLine3\", { required: false })}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <label htmlFor=\"city\"> </label>\n\n                  <input\n                    type=\"text\"\n                    id=\"city\"\n                    {...register(\"city\", { required: false })}\n                  />\n                  <div className=\"error mt-2\">\n                    {errors.city && <span>This field is required</span>}\n                  </div>\n                </div>\n                <div>\n                  <label htmlFor=\"Pincode\">city : </label>\n\n                  <input\n                    type=\"text\"\n                    id=\"Pincode\"\n                    {...register(\"pincode\", { required: false })}\n                  />\n                  <div className=\"error mt-2\">\n                    {errors.pincode && <span>This field is required</span>}\n                  </div>\n                </div>\n                <div>\n                  <label htmlFor=\"Contact Number\">Contact Number : </label>\n\n                  <input\n                    type=\"text\"\n                    id=\"Contact Number\"\n                    {...register(\"contactNumber\", { required: false })}\n                  />\n                  <div className=\"error mt-2\">\n                    {errors.contactNumber && (\n                      <span>This field is required</span>\n                    )}\n                  </div>\n                </div>\n                <div style={{ marginLeft: \"20%\", marginTop: \"20px\" }}>\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Submit\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <div className=\"search mt-2  \" id=\"nonPrintableArea\">\n            <form class=\"form-inline\">\n              <div class=\"form-group mx-sm-3 mb-2\">\n                <label for=\"inputPassword2\" class=\"sr-only\">\n                  Password\n                </label>\n                <input\n                  className=\"search_input\"\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  onChange={(e) => searchData(e)}\n                />\n                <button type=\"submit\" class=\"btn btn-primary mb-2\">\n                  Search\n                </button>\n              </div>\n            </form>\n          </div>\n\n          {partners.length != 0 && (\n            <table className=\"table table-hover \" id=\"nonPrintableArea\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Partner Id</th>\n                  <th scope=\"col\">Name</th>\n                  {/* <th scope=\"col\">AddressLine1</th>\n                  <th scope=\"col\">AddressLine2</th> */}\n                  <th scope=\"col\">City</th>\n                  {/* <th scope=\"col\">Pincode</th> */}\n                  <th scope=\"col\">Contact Number</th>\n                  <th scope=\"col\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {partners.map(\n                  (\n                    {\n                      replacementPartherId,\n                      name,\n                      addressLine1,\n                      addressLine2,\n                      addressLine3,\n                      city,\n                      pincode,\n                      contactNumber,\n                    },\n                    key\n                  ) => (\n                    <tr key={key}>\n                      <th scope=\"row\">{replacementPartherId}</th>\n                      <td>{name}</td>\n                      {/* <td>{addressLine1}</td>\n                      <td>{addressLine2}</td> */}\n                      {/* <td>{city}</td> */}\n                      <td>{pincode}</td>\n                      <td>{contactNumber}</td>\n                      <td>\n                        <span\n                          className=\"mx-2 cursor_pointer\"\n                          onClick={() => {\n                            setPrintData({\n                              name: name,\n                              addressLine1: addressLine1,\n                              addressLine2: addressLine2,\n                              addressLine3: addressLine3,\n                              city: city,\n                              pincode: pincode,\n                              contactNumber: contactNumber,\n                            });\n                          }}\n                        >\n                          <i\n                            className=\"fas fa-print\"\n                            style={{ color: \"#0D6EFD\" }}\n                          ></i>\n                        </span>\n                        ||\n                        <Link\n                          to={\"/editreplacementpartner/\" + replacementPartherId}\n                          className=\"mx-2\"\n                        >\n                          <i className=\"fas fa-edit\"></i>\n                        </Link>\n                        ||\n                        <span\n                          onClick={() => deleteItem(replacementPartherId)}\n                          className=\"mx-2 cursor_pointer\"\n                        >\n                          <i\n                            className=\"far fa-trash-alt\"\n                            style={{ color: \"#0D6EFD\" }}\n                          ></i>\n                        </span>\n                      </td>\n                    </tr>\n                  )\n                )}\n              </tbody>\n            </table>\n          )}\n          <div style={{ width: \"60%\", margin: \"auto\" }}>\n            {Object.keys(printData).length != 0 && (\n              <ReplacementAddressPrint\n                printData={printData}\n                setPrintData={setPrintData}\n              />\n            )}\n          </div>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default CreateReplacementPartner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { formateDate } from \"./formateDate\";\n// import logo from \"./knox.jpeg\";\n\nconst InwardPrint = ({ data, customerData, inwardDate }) => {\n  const reduxItemData = useSelector(\n    (state) => state.replacementSystem.getAllItem\n  );\n\n  const GetcustomerName = (id) => {\n    let itemName = \"\";\n    if (reduxItemData.length != 0) {\n      reduxItemData.find((itemData) => {\n        if (itemData.itemId == id) {\n          itemName = itemData.name;\n        }\n      });\n    }\n    return itemName;\n  };\n\n  return (\n    <>\n      {/* <div  id=\"printableArea\">\n        <table className=\"print_table\">\n          <tr>\n            <td colspan=\"5\">\n              <h1 className=\"print_heading\">k-NOX INFOTECH</h1>\n              <p className=\"print_address\">Randhanpuri Bazar,Bhavnagar.</p>\n              <p className=\"print_details\">\n                Mo.8866269311. Email-knoxinfotech@gmail.com\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td colspan=\"6\" className=\"print_debitMemo\">\n              Replacement Inward Memo\n            </td>\n          </tr>\n          <tr className=\"print_customerDetails \">\n            <td>\n              <p className=\"print_MR print_bold_font\">M/S. :</p>\n            </td>\n            <td colspan=\"3\" className=\"print_customer_address\">\n              <div className=\"print_customer_address_position\">\n                <p className=\"print_bold_font\">{customerData.name}</p>\n                <p>{customerData.addressLine1}</p>\n                <p>{customerData.addressLine2}</p>\n\n                <p>\n                  {customerData.city} -{customerData.pincode}\n                </p>\n                <p>MO.{customerData.contactNumber}</p>\n              </div>\n            </td>\n            <td className=\"print_incoiceDetails\">\n              <p className=\"print_incoiceDetails_date print_bold_font\">\n                Date of Inward:\n                <span className=\"print_bold_font\">\n                  {data[0].date == \"\"\n                    ? formateDate(inwardDate)\n                    : formateDate(data[0].date)}\n                </span>\n              </p>\n            </td>\n          </tr>\n\n          <tr className=\"print_productTitle\">\n            <td className=\"print_productTitle_srno\">SrNo</td>\n            <td className=\"print_productTitle_productName\">Product Name</td>\n            <td className=\"print_productTitle_qty\">Qty</td>\n            <td className=\"print_productTitle_amount\">Sales Date</td>\n            <td className=\"print_productTitle_rate\"> Product SrNo.</td>\n          </tr>\n\n          {data.length != 0 &&\n            data.map(({ productName, quantity, srNo, salesdate }, index) => (\n              <tr className=\"print_productDetails\">\n                <td className=\"print_productDetails_srno\">{index + 1}</td>\n                <td className=\"print_productDetails_productName\">\n                  {GetcustomerName(productName)}\n                </td>\n                <td className=\"print_productDetails_qty\">{quantity}</td>\n                <td className=\"print_productDetails_amount\">\n                  {salesdate == \"\" ? \"-\" : formateDate(salesdate)}\n                </td>\n                <td className=\"print_productDetails_rate\">\n                  {srNo == \"\" ? \"-\" : srNo}\n                </td>\n              </tr>\n            ))}\n        </table>\n      </div> */}\n      <div id=\"printableArea\">\n        <div className=\"heading\">\n          <div className=\"memo_part\">\n            <div>SERVICE MEMO</div>\n            <div>ORIGINAL MEMO</div>\n          </div>\n          <div className=\"address\">\n            <div className=\"icon\">\n              <img src={process.env.PUBLIC_URL + \"/image.jpg\"} alt=\"image\" />\n            </div>\n            <div className=\"address_part\">\n              <div className=\"address_title\">\n                K- NOX INFOTECH (REPLACEMENT/SERVICE memo)\n              </div>\n              <div className=\"address_area\">RANDHANPURI BAZAR, BHAVNAGAR</div>\n              <div className=\"time\">\n                TIME : 10:30AM TO 2:00PM & 3:30AM TO 6:00PM\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"grid-container\">\n          <div className=\"parentFor_item2\">\n            <div class=\"item2\">\n              <div className=\"address\"> To: </div>\n              <div className=\"address_content\">\n                <div>\n                  <p className=\"print_bold_font\">{customerData.name}</p>\n                </div>\n                <div>\n                  <p>{customerData.addressLine1}</p>\n                </div>\n                <div>\n                  <p>{customerData.addressLine2}</p>\n                </div>\n                <div>\n                  <p>\n                    {customerData.city} -{customerData.pincode}\n                  </p>\n                </div>\n                <div>\n                  <p>MO.{customerData.contactNumber}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"parentFor_item5\">\n            <div className=\"parentFor_item3\">\n              <div class=\"item3\">\n                Memo No:<span>1</span>\n              </div>\n              <div class=\"item4\">\n                Date:\n                <div className=\"bold\">\n                  {data[0].date == \"\"\n                    ? formateDate(inwardDate)\n                    : formateDate(data[0].date)}\n                </div>\n              </div>\n            </div>\n            <div class=\"item5\">\n              <p>\n                Resived On:<span>swew</span>\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"product_info_container\">\n          <div className=\"product_info_header\">\n            <div className=\"srno bold\">Sr No. </div>\n            <div className=\"disc bold\">Description Of Goods </div>\n            <div className=\"qty bold\">Qty. </div>\n            <div className=\"units bold\">Unit. </div>\n            <div className=\"decleration \"></div>\n          </div>\n          <div className=\"product_info_body\">\n            <div className=\"srno_body\">\n              <p>1 </p>\n            </div>\n            <div className=\"disc_body\">\n              <p>{GetcustomerName(data[0].productName)}</p>\n              <div>\n                <p className=\"remove_p_sapce\">\n                  OLD SR NO :{\" \"}\n                  <span> {data[0].srNo == \"\" ? \"-\" : data[0].srNo}</span>\n                </p>\n              </div>\n              {/* <div>\n                <p>\n                  NEW SR NO: <span>3245</span>\n                </p>\n              </div> */}\n            </div>\n            <div className=\"qty_body\">\n              <p>1</p>\n            </div>\n            <div className=\"units_body\">\n              <p>pcs</p>\n            </div>\n            <div className=\"decleration_body bold\">\n              <div>\n                <p className=\"remove_p_sapce\">DECLARATION:</p>\n              </div>\n              <p>PRODUCT DELIVERED IN GOOD CONDITION</p>\n              <div>\n                <p>TO :</p>\n                <p>DATE :</p>\n                <p>SIGN :</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"product_info_footer\">\n            <div className=\"srno_footer\"></div>\n            <div className=\"disc_footer\">Total</div>\n            <div className=\"qty_footer\">1</div>\n            <div className=\"units_footer\"></div>\n            <div className=\"decleration_footer\"></div>\n          </div>\n        </div>\n        <div className=\"signatory \"> Authorized Signatory </div>\n      </div>\n      <button\n        onClick={(e) => window.print()}\n        class=\"btn btn-info\"\n        id=\"print_button\"\n      >\n        print\n      </button>\n    </>\n  );\n};\nexport default InwardPrint;\n","import React, { useState, useEffect } from \"react\";\nimport InwardPrint from \"../../components/printInward\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchAPI } from \"../../api\";\nimport { STAGE1 } from \"../../api/apiList\";\nimport { message } from \"../../redux/actionFunction\";\n\nconst InwardStage1 = () => {\n  const dispatch = useDispatch();\n\n  const reduxCustomerData = useSelector(\n    (state) => state.replacementSystem.getAllCustomer\n  );\n  const reduxItemData = useSelector(\n    (state) => state.replacementSystem.getAllItem\n  );\n  const [allCustomerData, setAllCustomerData] = useState([]);\n  const [allItemData, setAllItemData] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState(\"\");\n  const [selectedCustomerData, setSelecctedCustomerData] = useState([]);\n  const [inputList, setInputList] = useState([\n    {\n      productName: \"\",\n      srNo: \"\",\n      date: \"\",\n      quantity: 1,\n      additionaldescription: \"\",\n      salesdate: \"\",\n    },\n  ]);\n  useEffect(() => {\n    setAllCustomerData(reduxCustomerData);\n    setAllItemData(reduxItemData);\n  }, [reduxCustomerData, reduxItemData]);\n\n  const [inwardDate, setInwardDate] = useState(\"\");\n  var today = \"\";\n  useEffect(() => {\n    var date = new Date();\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    var year = date.getFullYear();\n\n    if (month < 10) month = \"0\" + month;\n    if (day < 10) day = \"0\" + day;\n\n    today = year + \"-\" + month + \"-\" + day;\n\n    setInwardDate(today);\n  }, []);\n\n  useEffect(() => {\n    allCustomerData.find((value) => {\n      if (value.name == selectedCustomer) {\n        setSelecctedCustomerData(value);\n      }\n    });\n  }, [selectedCustomer]);\n\n  const handleInputChange = (e, index) => {\n    const { name, value } = e.target;\n    const list = [...inputList];\n    list[index][name] = value;\n    setInputList(list);\n  };\n\n  const handleRemoveClick = (index) => {\n    const list = [...inputList];\n    list.splice(index, 1);\n    setInputList(list);\n  };\n\n  const handleAddClick = () => {\n    setInputList([\n      ...inputList,\n      {\n        productName: \"\",\n        srNo: \"\",\n        date: \"\",\n        quantity: 1,\n        additionaldescription: \"\",\n        salesdate: \"\",\n      },\n    ]);\n  };\n\n  const handleSubmitData = (e) => {\n    e.preventDefault();\n    if (inputList.length == 1) {\n      let data = {\n        customerId: selectedCustomerData.customerId,\n        itemId: parseInt(inputList[0].productName),\n        srno: inputList[0].srNo,\n        additionalDescription: inputList[0].additionaldescription,\n        quantity: inputList[0].quantity,\n        inwardDate: inputList[0].date == \"\" ? inwardDate : inputList[0].date,\n        salesDate: inputList[0].salesdate,\n      };\n      FetchAPI(\"post\", STAGE1, data).then((res) => {\n        if (res.status == 200) {\n          dispatch(message({ message: res.data, type: \"success\" }));\n        }\n      });\n    }\n    if (inputList.length > 1) {\n      inputList.map((value) => {\n        let data = {};\n        data = {\n          customerId: selectedCustomerData.customerId,\n          itemId: parseInt(value.productName),\n          srno: value.srNo,\n          additionalDescription: value.additionaldescription,\n          quantity: value.quantity,\n          inwardDate: value.date == \"\" ? inwardDate : value[0].date,\n          salesDate: value.salesdate,\n        };\n        FetchAPI(\"post\", STAGE1, data).then((res) => {\n          if (res.status == 200) {\n            dispatch(message({ message: res.data, type: \"success\" }));\n          }\n        });\n      });\n    }\n  };\n\n  return (\n    <>\n      <div id=\"nonPrintableArea\">\n        <h3 className=\"text-center\">CUSSTOMER DETAILS</h3>\n        <div className=\"row\">\n          <div className=\"col col-md-6\">\n            <labe>Customer Name :</labe>\n            <input\n              list=\"partyName\"\n              name=\"customerName\"\n              className=\"form-control\"\n              placeholder=\"Enter Customer Name\"\n              onChange={(e) => setSelectedCustomer(e.target.value)}\n              required\n            />\n            <datalist id=\"partyName\">\n              {allCustomerData.map(({ name }, key) => (\n                <option value={name} key={key} />\n              ))}\n            </datalist>\n          </div>\n        </div>\n        {selectedCustomerData.length != 0 && (\n          <>\n            <div className=\"form-group mt-2\">\n              <label htmlFor=\"inputAddress\">Address :</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Address Line 1\"\n                defaultValue={selectedCustomerData.addressLine1}\n                disabled\n              />\n            </div>\n            <div className=\"form-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Address Line 2\"\n                defaultValue={selectedCustomerData.addressLine2}\n                disabled\n              />\n            </div>\n            <div className=\"form-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"City\"\n                defaultValue={selectedCustomerData.city}\n                disabled\n              />\n            </div>\n            <div className=\"row my-2\">\n              <div className=\"col\">\n                <labe>Postal Code :</labe>\n                <input\n                  type=\"text\"\n                  name=\"Postal Code\"\n                  className=\"form-control\"\n                  placeholder=\"Postal Code\"\n                  defaultValue={selectedCustomerData.pincode}\n                  disabled\n                />\n              </div>\n              <div className=\"col\">\n                <labe>Mobile Number:</labe>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Mobile Number\"\n                  defaultValue={selectedCustomerData.contactNumber}\n                  disabled\n                />\n              </div>\n            </div>\n          </>\n        )}\n\n        <form onSubmit={handleSubmitData} className=\"mt-3\">\n          {inputList.map((x, i) => {\n            return (\n              <div className=\"row\" key={i}>\n                <div className=\"form-group col-md-2\">\n                  <label htmlFor=\"productName\">Product Name:</label>\n                  <select\n                    name=\"productName\"\n                    id=\"productName\"\n                    className=\"form-control\"\n                    value={x.productName}\n                    onChange={(e) => handleInputChange(e, i)}\n                    required\n                  >\n                    <option value=\"\">--Please choose an option--</option>\n                    {allItemData.map(({ name, itemId }, key) => (\n                      <option value={itemId} key={key}>\n                        {name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group col-md-1\">\n                  <label htmlFor=\"inputCity\">Quantity :</label>\n                  <input\n                    type=\"number\"\n                    name=\"quantity\"\n                    className=\"form-control\"\n                    placeholder=\"Enter Product Quantity\"\n                    value={x.quantity}\n                    onChange={(e) => handleInputChange(e, i)}\n                    required\n                  />\n                </div>\n                <div className=\"form-group col-md-2\">\n                  <label htmlFor=\"inputState\">SR NO. :</label>\n                  <input\n                    type=\"text\"\n                    name=\"srNo\"\n                    className=\"form-control \"\n                    placeholder=\"SR NO. :\"\n                    value={x.srNo}\n                    onChange={(e) => handleInputChange(e, i)}\n                  />\n                </div>\n                <div className=\"form-group col-md-2\">\n                  <labe>Description:</labe>\n\n                  <input\n                    type=\"text\"\n                    name=\"additionaldescription\"\n                    className=\"form-control\"\n                    placeholder=\"Enter product Description\"\n                    value={x.additionaldescription}\n                    onChange={(e) => handleInputChange(e, i)}\n                  />\n                </div>\n                <div className=\"form-group col-md-3\">\n                  <div className=\"row\">\n                    <div className=\" col-md-6\">\n                      <labe>Date of Inward:</labe>\n\n                      <input\n                        type=\"date\"\n                        name=\"date\"\n                        className=\"form-control date_width\"\n                        value={x.date == \"\" ? inwardDate : x.date}\n                        onChange={(e) => handleInputChange(e, i)}\n                      />\n                    </div>\n                    <div className=\" col-md-6\">\n                      <labe>Sales Date :</labe>\n\n                      <input\n                        type=\"date\"\n                        name=\"salesdate\"\n                        className=\"form-control date_width \"\n                        value={x.salesdate}\n                        onChange={(e) => handleInputChange(e, i)}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-group col-md-2 mt-4\">\n                  {inputList.length != 1 && (\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-danger\"\n                      onClick={() => handleRemoveClick(i)}\n                    >\n                      Remove\n                    </button>\n                  )}\n                  {inputList.length - 1 == i && (\n                    <button\n                      onClick={handleAddClick}\n                      className=\"btn btn-success\"\n                      type=\"button\"\n                    >\n                      Add\n                    </button>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n          <div className=\"mt-3\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n      <InwardPrint\n        data={inputList}\n        customerData={selectedCustomerData}\n        inwardDate={inwardDate}\n      />\n    </>\n  );\n};\n\nexport default InwardStage1;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchAPI } from \"../../api\";\nimport { EDIT_SPECIFIC_ITEM } from \"../../api/apiList\";\nimport { message } from \"../../redux/actionFunction\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport Loader from \"../../components/loader\";\n\nconst EditItem = () => {\n  const [loading, setLoading] = useState(true);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const getAllItems = useSelector(\n    (state) => state.replacementSystem.getAllItem\n  );\n  const params = useParams();\n  useEffect(() => {\n    getAllItems.find((value) => {\n      if (value.itemId == params.id) {\n        setLoading(false);\n        setValue(\"name\", value.name);\n      }\n    });\n  }, [getAllItems]);\n\n  const handleSubmitData = async (data) => {\n    FetchAPI(\"PATCH\", EDIT_SPECIFIC_ITEM + params.id, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        history.push(\"/createitem\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          <h3 className=\"mb-3 \">Edit Item</h3>\n\n          <form onSubmit={handleSubmit(handleSubmitData)}>\n            <div className=\"form-group mb-2 \">\n              <label htmlFor=\"ItemName\" className=\"col-sm-1 \">\n                Item Name :\n              </label>\n              <input\n                type=\"text\"\n                id=\"ItemName\"\n                {...register(\"name\", { required: true })}\n              />\n              <div className=\"error mt-2\">\n                {errors.name && <span>This field is required</span>}\n              </div>\n            </div>\n            <div>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default EditItem;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchAPI } from \"../../api\";\nimport { EDIT_SPECIFIC_PARTNER } from \"../../api/apiList\";\nimport { message } from \"../../redux/actionFunction\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport Loader from \"../../components/loader\";\n\nconst EditPartner = () => {\n  const [loading, setLoading] = useState(true);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const getAllPartner = useSelector(\n    (state) => state.replacementSystem.getAllPartner\n  );\n  const params = useParams();\n  useEffect(() => {\n    getAllPartner.find((value) => {\n      if (value.replacementPartherId == params.id) {\n        setLoading(false);\n        setValue(\"name\", value.name);\n        setValue(\"addressLine1\", value.addressLine1);\n        setValue(\"addressLine2\", value.addressLine2);\n        setValue(\"city\", value.city);\n        setValue(\"pincode\", value.pincode);\n        setValue(\"contactNumber\", value.contactNumber);\n      }\n    });\n  }, [getAllPartner]);\n\n  const handleSubmitData = (data) => {\n    FetchAPI(\"PATCH\", EDIT_SPECIFIC_PARTNER + params.id, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        history.push(\"/createreplacementpartner\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          <h3 className=\"mb-3 \">Edit Replacement partner</h3>\n          <div className=\"create_customer\">\n            <form onSubmit={handleSubmit(handleSubmitData)}>\n              <div>\n                <label htmlFor=\"Customer Name\">Partner Name:</label>\n                <input\n                  id=\"Customer Name\"\n                  {...register(\"name\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.name && <span>This field is required</span>}\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"addressLine1\">Address : </label>\n                <input\n                  type=\"text\"\n                  id=\"addressLine1\"\n                  {...register(\"addressLine1\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.addressLine1 && <span>This field is required</span>}\n                </div>\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"create_customer_without_label\"\n                    {...register(\"addressLine2\", { required: false })}\n                  />\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"city\">city : </label>\n                <input\n                  type=\"text\"\n                  id=\"city\"\n                  {...register(\"city\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.city && <span>This field is required</span>}\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"Pincode\">Pincode : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"Pincode\"\n                  {...register(\"pincode\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.pincode && <span>This field is required</span>}\n                </div>\n              </div>\n              <div>\n                <label htmlFor=\"Contact Number\">Contact Number : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"Contact Number\"\n                  {...register(\"contactNumber\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.contactNumber && <span>This field is required</span>}\n                </div>\n              </div>\n              <div style={{ marginLeft: \"20%\", marginTop: \"20px\" }}>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              </div>\n            </form>\n          </div>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default EditPartner;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchAPI } from \"../../api\";\nimport { EDIT_SPECIFIC_CUSTOMER } from \"../../api/apiList\";\nimport { message } from \"../../redux/actionFunction\";\nimport { useHistory } from \"react-router-dom\";\nimport { set, useForm } from \"react-hook-form\";\nimport Loader from \"../../components/loader\";\n\nconst EditCustomer = () => {\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const history = useHistory();\n  const getAllCustomers = useSelector(\n    (state) => state.replacementSystem.getAllCustomer\n  );\n  const params = useParams();\n  useEffect(() => {\n    getAllCustomers.find((value) => {\n      if (value.customerId == params.id) {\n        setLoading(false);\n        setValue(\"name\", value.name);\n        // setValue(\"addressLine1\", value.addressLine1);\n        // setValue(\"addressLine2\", value.addressLine2);\n        // setValue(\"pincode\", value.pincode);\n        setValue(\"city\", value.city);\n        setValue(\"contactNumber\", value.contactNumber);\n      }\n    });\n  }, [getAllCustomers]);\n\n  const handleSubmitData = (data) => {\n    FetchAPI(\"PATCH\", EDIT_SPECIFIC_CUSTOMER + params.id, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        history.push(\"/createcustomer\");\n      }\n    });\n  };\n  return (\n    <>\n      {!loading ? (\n        <>\n          <h3 className=\"mb-3 \">Edit Customer</h3>\n          <div className=\"create_customer\">\n            <form onSubmit={handleSubmit(handleSubmitData)}>\n              <div>\n                <label htmlFor=\"Customer Name\">Customer Name:</label>\n                <input\n                  id=\"Customer Name\"\n                  {...register(\"name\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.name && <span>This field is required</span>}\n                </div>\n              </div>\n              {/* <div>\n                <label htmlFor=\"addressLine1\">Address : </label>\n                <input\n                  type=\"text\"\n                  id=\"addressLine1\"\n                  {...register(\"addressLine1\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.addressLine1 && <span>This field is required</span>}\n                </div>\n                <div>\n                  <input\n                    type=\"text\"\n                    className=\"create_customer_without_label\"\n                    {...register(\"addressLine2\", { required: false })}\n                  />\n                </div>\n              </div> */}\n              <div>\n                <label htmlFor=\"city\">city : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"city\"\n                  {...register(\"city\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.city && <span>This field is required</span>}\n                </div>\n              </div>\n              {/* <div>\n                <label htmlFor=\"Pincode\">Pincode : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"Pincode\"\n                  {...register(\"pincode\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.pincode && <span>This field is required</span>}\n                </div>\n              </div> */}\n              <div>\n                <label htmlFor=\"Contact Number\">Contact Number : </label>\n\n                <input\n                  type=\"text\"\n                  id=\"Contact Number\"\n                  {...register(\"contactNumber\", { required: true })}\n                />\n                <div className=\"error mt-2\">\n                  {errors.contactNumber && <span>This field is required</span>}\n                </div>\n              </div>\n              <div style={{ marginLeft: \"20%\", marginTop: \"20px\" }}>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Submit\n                </button>\n              </div>\n            </form>\n          </div>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default EditCustomer;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchAPI } from \"../../api\";\nimport { STAGE2, SPECIFIC_REPLACEMENT_DATA } from \"../../api/apiList\";\nimport { message } from \"../../redux/actionFunction\";\nimport { useParams } from \"react-router-dom\";\nimport { formateDate } from \"../../components/formateDate\";\nimport Loader from \"../../components/loader\";\n\nconst InwardStage2 = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const params = useParams();\n\n  useEffect(async () => {\n    FetchAPI(\"get\", SPECIFIC_REPLACEMENT_DATA + params.id, data).then((res) => {\n      if (res.status == 200) {\n        setLoading(false);\n        setData(res.data);\n      }\n    });\n  }, []);\n\n  const reduxPartnerData = useSelector(\n    (state) => state.replacementSystem.getAllPartner\n  );\n  const [productData, setProductData] = useState({\n    replacementPartherId: \"\",\n    replacementSentDate: new Date(),\n    purchaseBillDate: \"\",\n  });\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setProductData({\n      ...productData,\n      [name]: value,\n    });\n  };\n\n  const handleSubmitData = (e) => {\n    e.preventDefault();\n    let data = productData;\n\n    FetchAPI(\"PATCH\", STAGE2 + params.id, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n      }\n    });\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          {data.length != 0 && (\n            <table className=\"table\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th scope=\"col\">Id</th>\n                  <th scope=\"col\">Customer Name</th>\n                  <th scope=\"col\">Item Name</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">SrNo.</th>\n\n                  <th scope=\"col\">Inward Date</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map(\n                  (\n                    {\n                      replacementId,\n                      srno,\n                      quantity,\n                      inwardDate,\n                      customerName,\n                      itemName,\n                    },\n                    key\n                  ) => (\n                    <tr key={key}>\n                      <th scope=\"row\">{replacementId}</th>\n                      <td>{customerName}</td>\n                      <td>{itemName}</td>\n                      <td>{quantity}</td>\n                      <td>{srno}</td>\n                      <td>{formateDate(inwardDate)}</td>\n                    </tr>\n                  )\n                )}\n              </tbody>\n            </table>\n          )}\n\n          <div>\n            <h3 className=\"text-center\">Replacement Sent Details</h3>\n          </div>\n\n          <form onSubmit={handleSubmitData}>\n            <div className=\"row\">\n              <div className=\"form-group col-md-2\">\n                <label htmlFor=\"replacementPartherId\">\n                  Replacement Partner Name:\n                </label>\n                <select\n                  name=\"replacementPartherId\"\n                  id=\"replacementPartherId\"\n                  className=\"form-control\"\n                  value={productData.replacementPartherId}\n                  onChange={(e) => handleInputChange(e)}\n                  required\n                >\n                  <option value=\"\">--Please choose an option--</option>\n                  {reduxPartnerData.map(\n                    ({ name, replacementPartherId }, key) => (\n                      <option value={replacementPartherId} key={key}>\n                        {name}\n                      </option>\n                    )\n                  )}\n                </select>\n              </div>\n\n              <div className=\"form-group col-md-2\">\n                <labe>Replacement Sent Date :</labe>\n\n                <input\n                  type=\"date\"\n                  name=\"replacementSentDate\"\n                  className=\"form-control\"\n                  value={formateDate(productData.replacementSentDate, true)}\n                  onChange={(e) => handleInputChange(e)}\n                  required\n                />\n              </div>\n              <div className=\"form-group col-md-2\">\n                <labe>Purchase Bill Date :</labe>\n\n                <input\n                  type=\"date\"\n                  name=\"purchaseBillDate\"\n                  className=\"form-control\"\n                  value={productData.purchaseBillDate}\n                  onChange={(e) => handleInputChange(e)}\n                />\n              </div>\n            </div>\n            <div>\n              <button type=\"submit\" className=\"btn btn-primary mt-3\">\n                Submit\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default InwardStage2;\n","import React from \"react\";\nimport { formateDate } from \"./formateDate\";\n\nconst OutwordPrint = ({ data, productData }) => {\n  console.log(data, productData);\n  return (\n    <>\n      {data.length != 0 && (\n        <div id=\"printableArea\">\n          <div className=\"heading\">\n            <div className=\"icon\">\n              <img\n                src={process.env.PUBLIC_URL + \"/image.jpg\"}\n                width=\"80px\"\n                height=\"80px\"\n                alt=\"image\"\n              />\n            </div>\n            <div>\n              {/* <div className=\"memo_part\">\n                <span>SERVICE MEMO/</span>\n                <span>ORIGINAL MEMO</span>\n              </div> */}\n\n              <div className=\"address_title\">\n                K- NOX INFOTECH (REPLACEMENT CHALLAN)\n              </div>\n              <div className=\"address_area\">RANDHANPURI BAZAR, BHAVNAGAR</div>\n            </div>\n            {/* <div className=\"time\">\n                TIME : 10:30AM TO 2:00PM & 3:30AM TO 6:00PM\n              </div> */}\n          </div>\n\n          <div class=\"grid-container\">\n            <div className=\"parentFor_item2\">\n              <div class=\"item2\">\n                <div className=\"address bold\"> To: </div>\n                <div className=\"address_content\">\n                  <div>\n                    <p className=\"print_bold_font\">{data[0].customerName}</p>\n                  </div>\n                  {/* <div>\n                    <p>{data[0].customerAddressLine1}</p>\n                  </div>\n                  <div>\n                    <p>{data[0].customerAddressLine2}</p>\n                  </div> */}\n                  <div>\n                    <p>\n                      {data[0].customerCity}\n                      {/* -{data[0].customerPincode} */}\n                    </p>\n                  </div>\n                  <div>\n                    <p>MO.{data[0].customerContectNumber}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"parentFor_item5\">\n              <div className=\"parentFor_item3\">\n                <div class=\"item3\">Memo No:</div>\n                <div class=\"item4 bold\">\n                  Date:\n                  <div className=\"bold\">{formateDate(new Date())}</div>\n                </div>\n              </div>\n              <div class=\"item5 bold\">\n                <p>\n                  Received On:\n                  <span>{formateDate(data[0].inwardDate)}</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"product_info_container\">\n            <div className=\"product_info_header\">\n              <div className=\"srno bold\">Sr No. </div>\n              <div className=\"disc bold\">Description Of Goods </div>\n              <div className=\"qty bold\">Qty. </div>\n              <div className=\"units bold\">Unit. </div>\n              <div className=\"decleration \"></div>\n            </div>\n            <div className=\"product_info_body\">\n              <div className=\"srno_body\">\n                <p>1 </p>\n              </div>\n              <div className=\"disc_body\">\n                <p>{data[0].itemName} </p>\n                <div>\n                  <p className=\"remove_p_sapce\">\n                    OLD SR NO :\n                    <span> {data[0].srno == \"\" ? \"-\" : data[0].srno}</span>\n                  </p>\n                </div>\n                <div>\n                  <p>\n                    NEW SR NO:{\" \"}\n                    <span>\n                      {\" \"}\n                      {productData.newSrno == \"\" ? \"-\" : productData.newSrno}\n                    </span>\n                  </p>\n                </div>\n              </div>\n              <div className=\"qty_body\">\n                <p>1</p>\n              </div>\n              <div className=\"units_body\">\n                <p>pcs</p>\n              </div>\n              <div className=\"decleration_body bold\">\n                <div>\n                  <p className=\"remove_p_sapce\">DECLARATION:</p>\n                </div>\n                <p>PRODUCT DELIVERED IN GOOD CONDITION</p>\n                <div>\n                  <div style={{ marginLeft: \"5px\" }}>TO :</div>\n                  <div style={{ marginLeft: \"5px\" }}>DATE :</div>\n                  <div style={{ marginLeft: \"5px\" }}>Authorized SIGN :</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"product_info_footer\">\n              <div className=\"srno_footer\"></div>\n              <div className=\"disc_footer bold\">Total</div>\n              <div className=\"qty_footer\">1</div>\n              <div className=\"units_footer\"></div>\n              <div className=\"decleration_footer\"></div>\n            </div>\n          </div>\n          {/* <div className=\"signatory \"> Authorized Signatory </div> */}\n        </div>\n      )}\n      {data.length != 0 && (\n        <div id=\"printableArea\">\n          <span className=\"bold\">\n            -------------------------------------------------------------------------------------------------------------------------------\n          </span>\n\n          <div className=\"heading\">\n            <div className=\"icon\">\n              <img\n                src={process.env.PUBLIC_URL + \"/image.jpg\"}\n                width=\"80px\"\n                height=\"80px\"\n                alt=\"image\"\n              />\n            </div>\n            <div>\n              {/* <div className=\"memo_part\">\n                <span>SERVICE MEMO/</span>\n                <span>ORIGINAL MEMO</span>\n              </div> */}\n\n              <div className=\"address_title\">\n                K- NOX INFOTECH (REPLACEMENT CHALLAN)\n              </div>\n              <div className=\"address_area\">RANDHANPURI BAZAR, BHAVNAGAR</div>\n            </div>\n          </div>\n          <div class=\"grid-container\">\n            <div className=\"parentFor_item2\">\n              <div class=\"item2\">\n                <div className=\"address bold\"> To: </div>\n                <div className=\"address_content\">\n                  <div>\n                    <p className=\"print_bold_font\">{data[0].customerName}</p>\n                  </div>\n                  {/* <div>\n                    <p>{data[0].customerAddressLine1}</p>\n                  </div>\n                  <div>\n                    <p>{data[0].customerAddressLine2}</p>\n                  </div> */}\n                  <div>\n                    <p>\n                      {data[0].customerCity}\n                      {/* -{data[0].customerPincode} */}\n                    </p>\n                  </div>\n                  <div>\n                    <p>MO.{data[0].customerContectNumber}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"parentFor_item5\">\n              <div className=\"parentFor_item3\">\n                <div class=\"item3\">Memo No:</div>\n                <div class=\"item4 bold\">\n                  Date:\n                  <div className=\"bold\">{formateDate(new Date())}</div>\n                </div>\n              </div>\n              <div class=\"item5 bold\">\n                <p>\n                  Received On: <span>{formateDate(data[0].inwardDate)}</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"product_info_container\">\n            <div className=\"product_info_header\">\n              <div className=\"srno bold\">Sr No. </div>\n              <div className=\"disc bold\">Description Of Goods </div>\n              <div className=\"qty bold\">Qty. </div>\n              <div className=\"units bold\">Unit. </div>\n              <div className=\"decleration \"></div>\n            </div>\n            <div className=\"product_info_body\">\n              <div className=\"srno_body\">\n                <p>1 </p>\n              </div>\n              <div className=\"disc_body\">\n                <p>{data[0].itemName} </p>\n                <div>\n                  <p className=\"remove_p_sapce\">\n                    OLD SR NO :\n                    <span> {data[0].srno == \"\" ? \"-\" : data[0].srno}</span>\n                  </p>\n                </div>\n                <div>\n                  <p>\n                    NEW SR NO:{\" \"}\n                    <span>\n                      {\" \"}\n                      {productData.newSrno == \"\" ? \"-\" : productData.newSrno}\n                    </span>\n                  </p>\n                </div>\n              </div>\n              <div className=\"qty_body\">\n                <p>1</p>\n              </div>\n              <div className=\"units_body\">\n                <p>pcs</p>\n              </div>\n              <div className=\"decleration_body bold\">\n                <div>\n                  <p className=\"remove_p_sapce\">DECLARATION:</p>\n                </div>\n                <p>PRODUCT DELIVERED IN GOOD CONDITION</p>\n                <div>\n                  <div style={{ marginLeft: \"5px\" }}>TO :</div>\n                  <div style={{ marginLeft: \"5px\" }}>DATE :</div>\n                  <div style={{ marginLeft: \"5px\" }}>Customer SIGN :</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"product_info_footer\">\n              <div className=\"srno_footer\"></div>\n              <div className=\"disc_footer bold\">Total</div>\n              <div className=\"qty_footer\">1</div>\n              <div className=\"units_footer\"></div>\n              <div className=\"decleration_footer\"></div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <button\n        onClick={(e) => window.print()}\n        class=\"btn btn-info\"\n        id=\"print_button_outword\"\n      >\n        print\n      </button>\n    </>\n  );\n};\nexport default OutwordPrint;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { FetchAPI } from \"../../api\";\nimport { STAGE2, SPECIFIC_REPLACEMENT_DATA } from \"../../api/apiList\";\nimport { message } from \"../../redux/actionFunction\";\nimport { useParams } from \"react-router-dom\";\nimport { formateDate } from \"../../components/formateDate\";\nimport Loader from \"../../components/loader\";\nimport OutwordPrint from \"../../components/printOutward\";\n\nconst InwardStage3 = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n\n  const params = useParams();\n  const [productData, setProductData] = useState({\n    replacementReturnDate: new Date(),\n    newSrno: \"\",\n    additionalDesc: \"\",\n    outwardDate: \"\",\n    givenToPerson: \"\",\n  });\n  const [data, setData] = useState([]);\n\n  useEffect(async () => {\n    FetchAPI(\"get\", SPECIFIC_REPLACEMENT_DATA + params.id, data).then((res) => {\n      if (res.status == 200) {\n        setLoading(false);\n        setData(res.data);\n      }\n    });\n  }, []);\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setProductData({\n      ...productData,\n      [name]: value,\n    });\n  };\n\n  const handleSubmitData = (e) => {\n    e.preventDefault();\n    let data = productData;\n    FetchAPI(\"PATCH\", STAGE2 + params.id, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n      }\n    });\n  };\n\n  return (\n    <>\n      {!loading ? (\n        <>\n          {data.length != 0 && (\n            <table className=\"table\" id=\"nonPrintableArea\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th scope=\"col\">Id</th>\n                  <th scope=\"col\">Customer Name</th>\n                  <th scope=\"col\">Item Name</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">SrNo.</th>\n                  <th scope=\"col\">Inward Date</th>\n                  <th scope=\"col\">Replacement Parther Name</th>\n                  <th scope=\"col\">Replacement Sent Date</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map(\n                  (\n                    {\n                      replacementId,\n                      srno,\n                      quantity,\n                      inwardDate,\n                      customerName,\n                      itemName,\n                      replacementPartherName,\n                      replacementSentDate,\n                    },\n                    key\n                  ) => (\n                    <tr key={key}>\n                      <th scope=\"row\">{replacementId}</th>\n                      <td>{customerName}</td>\n                      <td>{itemName}</td>\n                      <td>{quantity}</td>\n                      <td>{srno}</td>\n                      <td>{formateDate(inwardDate)}</td>\n                      <td>{replacementPartherName}</td>\n                      <td>{formateDate(replacementSentDate)}</td>\n                    </tr>\n                  )\n                )}\n              </tbody>\n            </table>\n          )}\n\n          <div id=\"nonPrintableArea\">\n            <h3 className=\"text-center\">Replacement Resive Date</h3>\n          </div>\n\n          <form onSubmit={handleSubmitData}>\n            <div className=\"row\" id=\"nonPrintableArea\">\n              <div className=\"form-group col-md-2\">\n                <labe>Replacement Return Date :</labe>\n                <input\n                  type=\"date\"\n                  name=\"replacementReturnDate\"\n                  className=\"form-control\"\n                  value={formateDate(productData.replacementReturnDate, true)}\n                  onChange={(e) => handleInputChange(e)}\n                  required\n                />\n              </div>\n              <div className=\"form-group col-md-2\">\n                <labe>New Srno :</labe>\n\n                <input\n                  type=\"text\"\n                  name=\"newSrno\"\n                  className=\"form-control\"\n                  value={productData.newSrno}\n                  onChange={(e) => handleInputChange(e)}\n                />\n              </div>\n              <div className=\"form-group col-md-2\">\n                <labe>Additional Desc :</labe>\n\n                <input\n                  type=\"text\"\n                  name=\"additionalDesc\"\n                  className=\"form-control\"\n                  value={productData.additionalDesc}\n                  onChange={(e) => handleInputChange(e)}\n                />\n              </div>\n              <div className=\"form-group col-md-2\">\n                <labe>Outward Date :</labe>\n\n                <input\n                  type=\"date\"\n                  name=\"outwardDate\"\n                  className=\"form-control\"\n                  value={productData.outwardDate}\n                  onChange={(e) => handleInputChange(e)}\n                />\n              </div>\n              <div className=\"form-group col-md-2\">\n                <labe>Given To Person :</labe>\n\n                <input\n                  type=\"text\"\n                  name=\"givenToPerson\"\n                  className=\"form-control\"\n                  value={productData.givenToPerson}\n                  onChange={(e) => handleInputChange(e)}\n                />\n              </div>\n            </div>\n            <div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary mt-3\"\n                id=\"nonPrintableArea\"\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n          <OutwordPrint data={data} productData={productData} />\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default InwardStage3;\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchAPI } from \"../api\";\nimport {\n  ITEM_FILTER,\n  CUSTOMER_FILTER,\n  PURCHASE_PARTNER_FILTER,\n  HOME,\n  DELETE_SPECIFIC_REPLACEMENT_DATA,\n} from \"../api/apiList\";\nimport { formateDate } from \"../components/formateDate\";\nimport { Link } from \"react-router-dom\";\nimport { message } from \"../redux/actionFunction\";\nimport Loader from \"./loader\";\n\nconst FilterData = () => {\n  const dispatch = useDispatch();\n  const FilterOptionValue = localStorage.getItem(\"filterOption\");\n  const [loading, setLoading] = useState(\n    FilterOptionValue == \"Total Records\" ? true : false\n  );\n  const [allCustomerData, setAllCustomerData] = useState([]);\n  const [allItemData, setAllItemData] = useState([]);\n  const [allPartnerData, setAllPartnerData] = useState([]);\n  const [filterData, setFilterData] = useState([]);\n  const [mainData, setMainData] = useState([]);\n  const reduxCustomerData = useSelector(\n    (state) => state.replacementSystem.getAllCustomer\n  );\n  const reduxItemData = useSelector(\n    (state) => state.replacementSystem.getAllItem\n  );\n\n  const reduxPartnerData = useSelector(\n    (state) => state.replacementSystem.getAllPartner\n  );\n\n  useEffect(() => {\n    getTotalRecords();\n    setFilterData([]);\n    if (FilterOptionValue == \"Total Records\") {\n      setLoading(true);\n    }\n  }, [FilterOptionValue]);\n\n  const getTotalRecords = () => {\n    if (FilterOptionValue == \"Total Records\") {\n      FetchAPI(\"get\", HOME).then((res) => {\n        if (res.status == 200) {\n          setLoading(false);\n          setFilterData(res.data);\n          setMainData(res.data);\n        }\n      });\n    }\n  };\n\n  useMemo(() => {\n    setAllCustomerData(reduxCustomerData);\n    setAllItemData(reduxItemData);\n  }, [reduxCustomerData, reduxItemData]);\n  useMemo(() => {\n    setAllItemData(reduxItemData);\n  }, [reduxItemData]);\n  useMemo(() => {\n    setAllPartnerData(reduxPartnerData);\n  }, [reduxPartnerData]);\n\n  const handleInputChange = (value, filterOption) => {\n    setLoading(true);\n    if (value != \"\" && filterOption == \"Item Wise\") {\n      let data = { itemId: parseInt(value) };\n      FetchAPI(\"post\", ITEM_FILTER, data).then((res) => {\n        if (res.status == 200) {\n          setLoading(false);\n          setFilterData(res.data);\n        }\n      });\n    } else if (value != \"\" && filterOption == \"Sales Party Wise\") {\n      let data = { customerId: parseInt(value) };\n      FetchAPI(\"post\", CUSTOMER_FILTER, data).then((res) => {\n        if (res.status == 200) {\n          setFilterData(res.data);\n          setLoading(false);\n        }\n      });\n    } else if (value != \"\" && filterOption == \"Purchase Party Wise\") {\n      let data = { replacementPartherId: parseInt(value) };\n      FetchAPI(\"post\", PURCHASE_PARTNER_FILTER, data).then((res) => {\n        if (res.status == 200) {\n          setFilterData(res.data);\n          setLoading(false);\n        }\n      });\n    } else {\n      setFilterData([]);\n    }\n  };\n  const deleteSpecificRecord = (id) => {\n    FetchAPI(\"delete\", DELETE_SPECIFIC_REPLACEMENT_DATA + id).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        getTotalRecords();\n      }\n    });\n  };\n\n  const searchValue = (e) => {\n    let filterValue = [];\n    mainData.filter((value) => {\n      if (\n        value.srno.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        value.newSrno.toLowerCase().includes(e.target.value.toLowerCase())\n      ) {\n        filterValue.push(value);\n      }\n    });\n    setFilterData(filterValue);\n  };\n\n  return (\n    <>\n      <div>\n        {/* -------------------Item Wise------------------------ */}\n        {FilterOptionValue == \"Item Wise\" &&\n          (!loading ? (\n            <>\n              <div className=\"col-3 \">\n                <label htmlFor=\"productName\">Product Name:</label>\n                <select\n                  name=\"productName\"\n                  id=\"productName\"\n                  className=\"form-control\"\n                  // value={x.productName}\n                  onChange={(e) =>\n                    handleInputChange(e.target.value, \"Item Wise\")\n                  }\n                  required\n                >\n                  <option value=\"\">--Please choose an option--</option>\n                  {allItemData.map(({ name, itemId }, key) => (\n                    <option value={itemId} key={key}>\n                      {name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              {filterData.length != 0 ? (\n                <table className=\"table table-hover table-responsive\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Item Name</th>\n                      <th scope=\"col\">Customer Name</th>\n                      <th scope=\"col\">Quantity</th>\n                      <th scope=\"col\">Inward Date</th>\n                      <th scope=\"col\">Replacement Parther Name</th>\n                      <th scope=\"col\">Replacement Sent Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filterData.map(\n                      (\n                        {\n                          itemName,\n                          customerName,\n                          quantity,\n                          inwardDate,\n                          replacementPartherName,\n                          replacementSentDate,\n                        },\n                        key\n                      ) => (\n                        <tr key={key}>\n                          <td scope=\"row\">{itemName}</td>\n                          <td>{customerName}</td>\n                          <td>{quantity}</td>\n                          <td>{formateDate(inwardDate)}</td>\n                          <td>{replacementPartherName}</td>\n                          <td>{formateDate(replacementSentDate)}</td>\n                        </tr>\n                      )\n                    )}\n                  </tbody>\n                </table>\n              ) : (\n                <h4>No Data Found</h4>\n              )}\n            </>\n          ) : (\n            <Loader />\n          ))}\n        {/* -------------------Sales Party Wise------------------------ */}\n\n        {FilterOptionValue == \"Sales Party Wise\" &&\n          (!loading ? (\n            <>\n              <div className=\"col-3 \">\n                <label htmlFor=\"productName\">Customer Name:</label>\n                <select\n                  name=\"productName\"\n                  id=\"productName\"\n                  className=\"form-control\"\n                  // value={x.productName}\n                  onChange={(e) =>\n                    handleInputChange(e.target.value, \"Sales Party Wise\")\n                  }\n                  required\n                >\n                  <option value=\"\">--Please choose an option--</option>\n                  {allCustomerData.map(({ name, customerId }, key) => (\n                    <option value={customerId} key={key}>\n                      {name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              {filterData.length != 0 ? (\n                <table className=\"table table-hover table-responsive\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Customer Name</th>\n                      <th scope=\"col\">Item Name</th>\n                      <th scope=\"col\">Quantity</th>\n                      <th scope=\"col\">Inward Date</th>\n                      <th scope=\"col\">Replacement Parther Name</th>\n                      <th scope=\"col\">Replacement Sent Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filterData.map(\n                      (\n                        {\n                          itemName,\n                          customerName,\n                          quantity,\n                          inwardDate,\n                          replacementPartherName,\n                          replacementSentDate,\n                        },\n                        key\n                      ) => (\n                        <tr key={key}>\n                          <td scope=\"row\">{customerName}</td>\n                          <td>{itemName}</td>\n                          <td>{quantity}</td>\n                          <td>{formateDate(inwardDate)}</td>\n                          <td>{replacementPartherName}</td>\n                          <td>{formateDate(replacementSentDate)}</td>\n                        </tr>\n                      )\n                    )}\n                  </tbody>\n                </table>\n              ) : (\n                <h4>No Data Found</h4>\n              )}\n            </>\n          ) : (\n            <Loader />\n          ))}\n        {/* -------------------Purchase Party Wise------------------------ */}\n        {FilterOptionValue == \"Purchase Party Wise\" &&\n          (!loading ? (\n            <>\n              <div className=\"col-3 \">\n                <label htmlFor=\"productName\">Purchase party Name:</label>\n                <select\n                  name=\"productName\"\n                  id=\"productName\"\n                  className=\"form-control\"\n                  // value={x.productName}\n                  onChange={(e) =>\n                    handleInputChange(e.target.value, \"Purchase Party Wise\")\n                  }\n                  required\n                >\n                  <option value=\"\">--Please choose an option--</option>\n                  {allPartnerData.map(({ name, replacementPartherId }, key) => (\n                    <option value={replacementPartherId} key={key}>\n                      {name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              {filterData.length != 0 ? (\n                <table className=\"table table-hover table-responsive\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Replacement Parther Name</th>\n                      <th scope=\"col\">Item Name</th>\n                      <th scope=\"col\">Quantity</th>\n                      <th scope=\"col\">Inward Date</th>\n                      <th scope=\"col\">Customer Name</th>\n                      <th scope=\"col\">Replacement Sent Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filterData.map(\n                      (\n                        {\n                          itemName,\n                          customerName,\n                          quantity,\n                          inwardDate,\n                          replacementPartherName,\n                          replacementSentDate,\n                        },\n                        key\n                      ) => (\n                        <tr key={key}>\n                          <td scope=\"row\">{replacementPartherName}</td>\n                          <td>{itemName}</td>\n                          <td>{quantity}</td>\n                          <td>{formateDate(inwardDate)}</td>\n                          <td>{customerName}</td>\n                          <td>{formateDate(replacementSentDate)}</td>\n                        </tr>\n                      )\n                    )}\n                  </tbody>\n                </table>\n              ) : (\n                <h4>No Data Found</h4>\n              )}\n            </>\n          ) : (\n            <Loader />\n          ))}\n        {/* -------------------Total Records------------------------ */}\n        <div className=\"show-image\">\n          {FilterOptionValue == \"Total Records\" &&\n            (!loading ? (\n              <>\n                <div style={{ margin: \"15px 0\" }}>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search By SrNo.\"\n                    onChange={(e) => searchValue(e)}\n                  />\n                </div>\n                {filterData.length != 0 ? (\n                  <table className=\"table table-bordered table-responsive\">\n                    <thead>\n                      <tr>\n                        {/* <th scope=\"col\">Id</th> */}\n                        <th scope=\"col\">Customer Name</th>\n                        <th scope=\"col\">Item Name</th>\n                        <th scope=\"col\">SrNo.</th>\n                        <th scope=\"col\">Quantity</th>\n                        <th scope=\"col\">Description</th>\n                        <th scope=\"col\">Inward Date</th>\n                        <th scope=\"col\">Sales Date</th>\n                        <th scope=\"col\">Replacement Parther Name</th>\n                        <th scope=\"col\">Replacement Sent Date</th>\n                        <th scope=\"col\">Purchase Bill Date</th>\n                        <th scope=\"col\"> Replacement Return Date</th>\n                        <th scope=\"col\">New Srno</th>\n                        <th scope=\"col\">Additional Desc</th>\n                        <th scope=\"col\">Given To Person</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filterData.map(\n                        (\n                          {\n                            replacementId,\n                            srno,\n                            quantity,\n                            additionalDescription,\n                            inwardDate,\n                            salesDate,\n                            stage,\n                            replacementPartherId,\n                            replacementSentDate,\n                            purchaseBillDate,\n                            customerName,\n                            itemName,\n                            replacementPartherName,\n                            replacementReturnDate,\n                            newSrno,\n                            additionalDesc,\n                            givenToPerson,\n                          },\n                          key\n                        ) => (\n                          <tr key={key} className=\"test\">\n                            <td scope=\"row\">{customerName}</td>\n                            <td>{itemName}</td>\n                            <td>{srno}</td>\n                            <td>{quantity}</td>\n                            <td>{additionalDescription}</td>\n                            <td>{formateDate(inwardDate)} </td>\n                            <td>{formateDate(salesDate)}</td>\n                            <td>{replacementPartherName}</td>\n                            <td>{formateDate(replacementSentDate)}</td>\n                            <td>{formateDate(purchaseBillDate)}</td>\n                            <td>{formateDate(replacementReturnDate)}</td>\n                            <td>{newSrno}</td>\n                            <td>{additionalDesc}</td>\n                            <td>{givenToPerson}</td>\n\n                            <td className=\"disable_button\">\n                              <Link to={`editreplacementdata/${replacementId}`}>\n                                <button className=\"spacing\">Edit</button>\n                              </Link>\n\n                              <button\n                                className=\"spacing\"\n                                onClick={() =>\n                                  deleteSpecificRecord(replacementId)\n                                }\n                              >\n                                Delete\n                              </button>\n                            </td>\n                          </tr>\n                        )\n                      )}\n                    </tbody>\n                  </table>\n                ) : (\n                  <h3>No Data</h3>\n                )}\n              </>\n            ) : (\n              <Loader />\n            ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FilterData;\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchAPI } from \"../api\";\nimport {\n  EDIT_SPECIFIC_REPLACEMENT_DATA,\n  GET_SPECIFIC_REPLACEMENT_DATA,\n} from \"../api/apiList\";\nimport { message } from \"../redux/actionFunction\";\nimport { useHistory } from \"react-router-dom\";\nimport { formateDate } from \"../components/formateDate\";\n\nconst EditReplacementData = () => {\n  const dispatch = useDispatch();\n  //   const history = useHistory();\n  const params = useParams();\n  const [data, setData] = useState({});\n  const [allCustomerData, setAllCustomerData] = useState([]);\n  const [allItemData, setAllItemData] = useState([]);\n  const [allPartnerData, setAllPartnerData] = useState([]);\n  const reduxCustomerData = useSelector(\n    (state) => state.replacementSystem.getAllCustomer\n  );\n  const reduxItemData = useSelector(\n    (state) => state.replacementSystem.getAllItem\n  );\n  const reduxPartnerData = useSelector(\n    (state) => state.replacementSystem.getAllPartner\n  );\n  useMemo(() => {\n    setAllCustomerData(reduxCustomerData);\n    setAllItemData(reduxItemData);\n  }, [reduxCustomerData, reduxItemData]);\n  useMemo(() => {\n    setAllItemData(reduxItemData);\n  }, [reduxItemData]);\n  useMemo(() => {\n    setAllPartnerData(reduxPartnerData);\n  }, [reduxPartnerData]);\n\n  useEffect(() => {\n    FetchAPI(\"get\", GET_SPECIFIC_REPLACEMENT_DATA + params.id).then((res) => {\n      if (res.status == 200) {\n        setData(res.data[0]);\n      }\n    });\n  }, []);\n\n  function handleChange(evt) {\n    const value = evt.target.value;\n    setData({ ...data, [evt.target.name]: value });\n  }\n\n  const handleSubmitData = (e) => {\n    e.preventDefault();\n\n    FetchAPI(\"PUT\", EDIT_SPECIFIC_REPLACEMENT_DATA + params.id, data).then(\n      (res) => {\n        if (res.status == 200) {\n          dispatch(message({ message: res.data, type: \"success\" }));\n          // history.push(\"/createitem\");\n        }\n      }\n    );\n  };\n  return (\n    <>\n      {data.length != 0 && (\n        <form onSubmit={handleSubmitData}>\n          <div className=\"row\">\n            <div className=\"col\">\n              <label htmlFor=\"productName\">Product Name:</label>\n              <select\n                name=\"itemId\"\n                id=\"productName\"\n                className=\"form-control\"\n                onChange={(e) => handleChange(e)}\n              >\n                {allItemData.map(({ name, itemId }, key) => (\n                  <option\n                    value={itemId}\n                    key={key}\n                    selected={data.itemId == itemId}\n                  >\n                    {name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col\">\n              <label htmlFor=\"inputCity\">Quantity :</label>\n              <input\n                type=\"number\"\n                name=\"quantity\"\n                className=\"form-control\"\n                placeholder=\"Enter Product Quantity\"\n                value={data.quantity}\n                onChange={(e) => handleChange(e)}\n                required\n              />\n            </div>\n            <div className=\"col\">\n              <label for=\"inputState\">SrNo.</label>\n              <input\n                type=\"text\"\n                value={data.srno}\n                name=\"srno\"\n                className=\"form-control\"\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n            <div className=\"col\">\n              <labe>Description:</labe>\n\n              <input\n                type=\"text\"\n                name=\"additionaldescription\"\n                className=\"form-control\"\n                value={data.additionaldescription}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n            <div className=\"col\">\n              <labe>Date of Inward:</labe>\n\n              <input\n                type=\"date\"\n                name=\"inwardDate\"\n                className=\"form-control\"\n                value={formateDate(data.inwardDate, true)}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n            <div className=\"col\">\n              <labe>Sales Date :</labe>\n\n              <input\n                type=\"date\"\n                name=\"salesDate\"\n                className=\"form-control\"\n                value={formateDate(data.salesDate, true)}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col\">\n              <label htmlFor=\"productName\">Customer Name:</label>\n              <select\n                name=\"customerId\"\n                id=\"productName\"\n                className=\"form-control\"\n                onChange={(e) => handleChange(e)}\n              >\n                {allCustomerData.length != 0 &&\n                  allCustomerData.map(({ name, customerId }, key) => (\n                    <option\n                      value={customerId}\n                      key={key}\n                      selected={data.customerId == customerId}\n                    >\n                      {name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n            <div className=\"col\">\n              <label htmlFor=\"productName\">Replacement Partner Name:</label>\n              <select\n                name=\"replacementPartherId\"\n                id=\"productName\"\n                className=\"form-control\"\n                onChange={(e) => handleChange(e)}\n              >\n                {allPartnerData.length != 0 &&\n                  allPartnerData.map(({ name, replacementPartherId }, key) => (\n                    <option\n                      value={replacementPartherId}\n                      key={key}\n                      selected={\n                        data.replacementPartherId == replacementPartherId\n                      }\n                    >\n                      {name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n            <div className=\"col\">\n              <labe>Replacement Sent Date :</labe>\n\n              <input\n                type=\"date\"\n                name=\"replacementSentDate\"\n                className=\"form-control\"\n                value={formateDate(data.replacementSentDate, true)}\n                onChange={(e) => handleChange(e)}\n                required\n              />\n            </div>\n            <div className=\"col\">\n              <labe>Purchase Bill Date :</labe>\n\n              <input\n                type=\"date\"\n                name=\"purchaseBillDate\"\n                className=\"form-control\"\n                value={formateDate(data.purchaseBillDate, true)}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <labe>Replacement Return Date :</labe>\n              <input\n                type=\"date\"\n                name=\"replacementReturnDate\"\n                className=\"form-control\"\n                value={formateDate(data.replacementReturnDate, true)}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n            <div className=\"col\">\n              <labe>New Srno :</labe>\n\n              <input\n                type=\"text\"\n                name=\"newSrno\"\n                className=\"form-control\"\n                value={data.newSrno}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n            <div className=\"col\">\n              <labe>Additional Desc :</labe>\n\n              <input\n                type=\"text\"\n                name=\"additionalDesc\"\n                className=\"form-control\"\n                value={data.additionalDesc}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n\n            <div className=\"col\">\n              <labe>Outward Date :</labe>\n\n              <input\n                type=\"date\"\n                name=\"outwardDate\"\n                className=\"form-control\"\n                value={formateDate(data.outwardDate, true)}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n            <div className=\"col\">\n              <labe>Given To Person :</labe>\n\n              <input\n                type=\"text\"\n                name=\"givenToPerson\"\n                className=\"form-control\"\n                value={data.givenToPerson}\n                onChange={(e) => handleChange(e)}\n              />\n            </div>\n          </div>\n          <div>\n            <button type=\"submit\">Submit</button>\n          </div>\n        </form>\n      )}\n    </>\n  );\n};\n\nexport default EditReplacementData;\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { SIGNUP } from \"../api/apiList\";\nimport { useDispatch } from \"react-redux\";\nimport { message } from \"../redux/actionFunction\";\nimport { FetchAPI } from \"../api\";\nimport { useHistory } from \"react-router-dom\";\n\nconst SignUp = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [password, setPassword] = useState(\"\");\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const handleSubmitData = (data) => {\n    FetchAPI(\"post\", SIGNUP, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        history.push(\"/login\");\n      } else if (res.status == 400) {\n        dispatch(message({ message: res.data, type: \"error\" }));\n      }\n    });\n  };\n\n  const pass = register(\"password\", { required: true });\n\n  return (\n    <>\n      <h3 className=\"mb-3 \">Sign Up</h3>\n      <form onSubmit={handleSubmit(handleSubmitData)}>\n        <div className=\"create_customer\">\n          <div>\n            <label htmlFor=\"Name\"> Name:</label>\n            <input id=\"Name\" {...register(\"name\", { required: true })} />\n            <div className=\"error mt-2\">\n              {errors.name && <span>This field is required</span>}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"email\">Email : </label>\n            <input\n              type=\"text\"\n              id=\"email\"\n              {...register(\"email\", {\n                required: true,\n                pattern:\n                  /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/,\n              })}\n            />\n\n            {errors.email && (\n              <div className=\"error mt-2\">\n                <>\n                  {errors.email.type == \"required\" && (\n                    <span>This field is required</span>\n                  )}\n                  {errors.email.type == \"pattern\" && (\n                    <span>Enter A valid Email Address</span>\n                  )}\n                </>\n              </div>\n            )}\n          </div>\n\n          <div className=\"mt-2\">\n            <label htmlFor=\"password\">Password : </label>\n            <input\n              type=\"password\"\n              {...pass}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <div className=\"error mt-2\">\n              {errors.password && <span>This field is required</span>}\n            </div>\n          </div>\n          <div>\n            <label htmlFor=\"conpassword\">Confirm Password : </label>\n            <input\n              type=\"password\"\n              id=\"conpassword\"\n              {...register(\"comfirmPassword\", {\n                required: true,\n                validate: (value) => password == value,\n              })}\n            />\n            {errors.comfirmPassword && (\n              <div className=\"error mt-2\">\n                <>\n                  {errors.comfirmPassword.type == \"required\" && (\n                    <span>This field is required</span>\n                  )}\n                  {errors.comfirmPassword.type == \"validate\" && (\n                    <span>Password And Confirm Password Is Not Same </span>\n                  )}\n                </>\n              </div>\n            )}\n          </div>\n\n          <div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\nexport default SignUp;\n","import React from \"react\";\n\nconst PageNOtFound = () => {\n  return <h1>404 Page Not Found</h1>;\n};\n\nexport default PageNOtFound;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { LOGIN } from \"../api/apiList\";\nimport { useDispatch } from \"react-redux\";\nimport { message } from \"../redux/actionFunction\";\nimport { FetchAPI } from \"../api\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const handleSubmitData = (data) => {\n    FetchAPI(\"post\", LOGIN, data).then((res) => {\n      if (res.status == 200) {\n        dispatch(message({ message: res.data, type: \"success\" }));\n        localStorage.setItem(\"token\", res.data.token);\n        history.push(\"/\");\n      } else if (res.status == 500) {\n        dispatch(message({ message: res.data, type: \"error\" }));\n      }\n    });\n  };\n\n  return (\n    <>\n      <div>\n        <h3 className=\"mb-3 \">Sign Up</h3>\n        <form onSubmit={handleSubmit(handleSubmitData)}>\n          <div className=\"create_customer\">\n            <div>\n              <label htmlFor=\"email\">Email : </label>\n              <input\n                type=\"text\"\n                id=\"email\"\n                {...register(\"email\", {\n                  required: true,\n                  pattern:\n                    /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/,\n                })}\n              />\n\n              {errors.email && (\n                <div className=\"error mt-2\">\n                  <>\n                    {errors.email.type == \"required\" && (\n                      <span>This field is required</span>\n                    )}\n                    {errors.email.type == \"pattern\" && (\n                      <span>Enter A valid Email Address</span>\n                    )}\n                  </>\n                </div>\n              )}\n            </div>\n\n            <div className=\"mt-2\">\n              <label htmlFor=\"password\">Password : </label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                {...register(\"password\", {\n                  required: true,\n                })}\n              />\n\n              <div className=\"error mt-2\">\n                {errors.password && <span>This field is required</span>}\n              </div>\n            </div>\n\n            <div>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport jwt from \"jsonwebtoken\";\n\nfunction ProtectedRoute(props) {\n  const token = localStorage.getItem(\"token\");\n\n  if (token != null) {\n    const decode = jwt.verify(token, \"secretkey\");\n\n    if (decode.email != null && decode.iat != null) {\n      return (\n        <div>\n          <Route path={props.path} component={props.component} />\n        </div>\n      );\n    } else {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"filterOption\");\n      return <Redirect to={\"/login\"} />;\n    }\n  } else {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"filterOption\");\n    return <Redirect to={\"/login\"} />;\n  }\n}\nexport default ProtectedRoute;\n","import React, { useEffect } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport Header from \"./components/header\";\nimport CreateCustomer from \"./pages/customer/createCustomer\";\nimport CreateItem from \"./pages/createItem/createItem\";\nimport TableHover from \"./pages/TableHover\";\nimport { useSelector } from \"react-redux\";\nimport CreateReplacementPartner from \"./pages/createReplacementPartner/createReplacementPartner\";\nimport InwardStage1 from \"./pages/stage1\";\nimport EditItem from \"./pages/createItem/editItem\";\nimport EditPartner from \"./pages/createReplacementPartner/editReplacementPartner\";\nimport EditCustomer from \"./pages/customer/editCustomer\";\nimport InwardStage2 from \"./pages/stage2\";\nimport InwardStage3 from \"./pages/stage3\";\nimport FilterData from \"./components/filter\";\nimport EditReplacementData from \"./pages/editReplacementData\";\nimport SignUp from \"./pages/signUp\";\nimport PageNOtFound from \"./pages/404\";\nimport Login from \"./pages/login\";\nimport ProtectedRoute from \"./pages/protectedRoute\";\n\nconst Routes = () => {\n  const GlobalMessage = useSelector((state) => state.replacementSystem.message);\n\n  useEffect(() => {\n    if (GlobalMessage != undefined && GlobalMessage != \"\") {\n      if (GlobalMessage.type == \"success\") {\n        toast.success(GlobalMessage.message.message);\n      } else if (GlobalMessage.type == \"warning\") {\n        toast.warning(GlobalMessage.message.message);\n      } else if (GlobalMessage.type == \"error\") {\n        toast.error(GlobalMessage.message.message);\n      }\n    }\n  }, [GlobalMessage]);\n\n  return (\n    <>\n      <Router>\n        <Header />\n\n        <Switch>\n          <Route path=\"/signup\" component={SignUp} />\n          <Route path=\"/login\" component={Login} />\n          <ProtectedRoute exact path=\"/\" component={TableHover} />\n          <ProtectedRoute path=\"/createitem\" component={CreateItem} />\n          <ProtectedRoute path=\"/createcustomer\" component={CreateCustomer} />\n          <ProtectedRoute path=\"/editcustomer/:id\" component={EditCustomer} />\n          <ProtectedRoute path=\"/inwardstage1\" component={InwardStage1} />\n          <ProtectedRoute path=\"/inwardstage2/:id\" component={InwardStage2} />\n          <ProtectedRoute path=\"/inwardstage3/:id\" component={InwardStage3} />\n          <ProtectedRoute path=\"/edititem/:id\" component={EditItem} />\n          <ProtectedRoute path=\"/filter\" component={FilterData} />\n          <ProtectedRoute\n            path=\"/editreplacementdata/:id\"\n            component={EditReplacementData}\n          />\n          <ProtectedRoute\n            path=\"/createreplacementpartner\"\n            component={CreateReplacementPartner}\n          />\n          <ProtectedRoute\n            path=\"/editreplacementpartner/:id\"\n            component={EditPartner}\n          />\n          <Route component={PageNOtFound} />\n        </Switch>\n      </Router>\n    </>\n  );\n};\n\nexport default Routes;\n","import {\n  MESSAGE,\n  GET_ALL_CUSTOMER,\n  GET_ALL_ITEM,\n  GET_ALL_REPLACEMENT_PARTNER,\n} from \"../action\";\n\nconst INITIAL_STATE = {\n  message: \"\",\n  getAllCustomer: [],\n  getAllItem: [],\n  getAllPartner: [],\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case MESSAGE:\n      return {\n        ...state,\n        message: action.payload,\n      };\n\n    case GET_ALL_CUSTOMER:\n      return {\n        ...state,\n        getAllCustomer: action.payload,\n      };\n    case GET_ALL_ITEM:\n      return {\n        ...state,\n        getAllItem: action.payload,\n      };\n    case GET_ALL_REPLACEMENT_PARTNER:\n      return {\n        ...state,\n        getAllPartner: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport reducer from \"./reducer/reducer\";\n\nconst rootReducer = combineReducers({\n  replacementSystem: reducer,\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(rootReducer, composeWithDevTools());\nexport default store;\n","import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Routes from \"./router\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Routes />\n        <ToastContainer pauseOnFocusLoss={false} autoClose={3000} />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}